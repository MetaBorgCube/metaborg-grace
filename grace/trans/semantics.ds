module trans/semantics

imports
  src-gen/ds-signatures/grace-sig
  src-gen/ds-signatures/grace-lowered-sig
  
  trans/values
  trans/store
  trans/environment
  trans/lookup

signature
  
  arrows
    Program -init-> V
    Program --> V

    Exp --> V
    CodeSequence --> V
    Declaration --> V
    Assignment --> V
    CallArgs --> V
    List(CodeSequence) --> V
//    Params --> List(String)

    Inherit --> Ref
    
    List(Exp) -ea-> List(V)
    
  constructors
    
    Call: M * List(V) --> V
    
    saveConst: String * V * Members --> Members
    saveConstants: List(String) * List(V) * Members --> Members
    
    add-member: String * List(String) * List(CodeSequence) --> Unit
    add-members: List(String) * List(List(CodeSequence)) --> Unit
    
    wrap-values: List(V) --> List(List(CodeSequence))
    
    no-super: Int --> Ref
    
  native operators
    nativeIBinOp: String * Int * Int -> Int
    nativePrint: V -> V
    
rules
  
  Expression(e) --> e.
  Declaration(e) --> e.
  Assignment(e) --> e.
  Wrapped(v) --> v.
  
  CS(i) -s-> i.
  DS(i) -s-> i.

  Number(s) --> NumV(parseNumber(s)).
  ArgNumber(s) --> NumV(parseNumber(s)).
  ArgString(s) --> StringV(s).
  String(s) --> StringV(s).
  
  p@Program(_, _) -init-> v
    where
      CS CS(fresh), DS DS(fresh) |- p :: OHeap {}, MHeap {} --> v.
      
  Program(cs, _) --> v
    where
      allocateObject(NoObject())--> r;
      CS CS(r), DS DS(r) |- cs --> v.
  
  [] : List(CodeSequence) --> Done().
  
  [code | [] ] : List(CodeSequence) --> code.

  [code | cs@[_|_] ] : List(CodeSequence) --> cs
    where code --> _.
  
  MCallCanonicalL(receiver, name, _, args) --> v
    where
       receiver --> ObjectRef(r);
       DS DS(r) |- lookup(name) --> m;
       DS DS(r) |- Call(m, args) --> v.
  
  MCallImplL("base_print", _, [v]) --> nativePrint(v).
  
  MCallImplL(name, _, vs) --> Call(lookup(name), vs).
  
  Constant(name, _, _, v) --> Done()
    where
      add-member(name, [], [Wrapped(v)]) --> _.
  
  MethodDeclL(_, name, _, _, params, _, _, code, _) --> Done()
    where
      add-member(name, params, code) --> _.
      
  dsv |- ObjectDecl(inherit, [], cs) --> ObjectRef(or)
    where
      allocateObject(Object(dsv, inherit, {})) --> or;
      CS CS(or), DS DS(or) |- cs --> _.

  Call(Method([], code, ds), []) --> v
    where
      CS CS(ds), DS DS(ds) |- code --> v.
  
  Call(Method([n | _ ], code, ds), [a | _ ]) --> v
    where
      allocateObject(Object(ds, no-super(0), {})) --> call-scope;
      DS DS(call-scope) |- add-member(n, [], [Wrapped(a)]) --> _;
      CS CS(call-scope), DS DS(call-scope) |- code --> v.
  
  no-super(_) --> allocateObject(NoObject()).
  
  wrap-values([]) --> [] : List(List(CodeSequence)).
  
  wrap-values([v|vs]) --> [ wv | wvs ] : List(List(CodeSequence))
    where
      [Wrapped(v)] --> wv;
      wrap-values(vs) --> wvs.
  
  add-members([], []) --> Unit().
  
  add-members([n | ns], [c | cs]) --> Unit()
    where
      add-member(n, [], c) --> _;
      add-members(ns, cs) --> _.
  
  dsv |- add-member(name, params, code) --> Unit()
    where
      allocateMethod(Method(params, code, dsv)) --> iMethod;
      readObject(dsv) --> Object(enc, sup, tbl);
      writeObject(dsv, Object(enc, sup, {name |--> iMethod, tbl} )) --> _.
      
  [] : List(Exp) -ea-> [].
  
  [arg] : List(Exp) -ea-> [v]
    where
      arg --> v.
  
  [arg | more] : List(Exp) -ea-> [v | vs]
    where
      arg --> v;
      more -ea-> vs : List(V).

  Inherit(e, _, _) --> r
    where
      e --> ObjectRef(r).

  NoInherit() --> r
    where
      allocateObject(NoObject()) --> r.

module trans/semantics

imports
  src-gen/ds-signatures/grace-sig
  src-gen/ds-signatures/grace-lowered-sig
  
  trans/values
  trans/store
  trans/environment
  trans/lookup

signature

  arrows
    Program -init-> V
    
    Exp --> V
    CodeSequence --> V
    Declaration --> V
    Assignment --> V
    CallArgs --> V
    List(CodeSequence) --> V
    Params --> List(String)
    
    Exp -o-> O
    Declaration -o-> O

  
    List(Exp) -ea-> List(V)
    
  constructors
    
    Call: M * List(V) --> V
    
    saveConst: String * V * Members --> Members
    saveConstants: List(String) * List(V) * Members --> Members
    
  native operators
    nativeIBinOp: String * Int * Int -> Int
    nativePrint: V -> V
    
rules

  Expression(e) --> e.
  Declaration(e) --> e.
  Assignment(e) --> e.
  Wrapped(v) --> v.
  
  ICS(i) -s-> i.
  IDS(i) -s-> i.

  Number(s) --> NumV(parseNumber(s)).
  ArgNumber(s) --> NumV(parseNumber(s)).
  ArgString(s) --> StringV(s).
  String(s) --> StringV(s).

  Program(cs, _) -init-> cs'
    where
      CS ICS(fresh), DS IDS(fresh) |- allocateObject(NoObject()) :: OHeap {}, MHeap {} --> i;
      CS ICS(i), DS IDS(i) |- cs :: OHeap {}, MHeap {} --> cs' :: OHeap _, MHeap _.
  
  cs : List(CodeSequence) --> v'
    where
      case cs of {
        [] =>
          Done() => v'
        [code | [] ] =>  //needed for final value
          code --> v'
        [code | cs'] =>
          code --> _;
          cs' --> v'

      }.

  [] : List(Exp) -ea-> [].
  
  [arg] : List(Exp) -ea-> [v]
    where
      arg --> v.
  
  [arg | more] : List(Exp) -ea-> [v | vs]
    where
      arg --> v;
      more -ea-> vs : List(V).

  ics |- MCallCanonicalL(receiver, name, _, args) --> v
    where
       ics |- receiver --> ObjectRef(i');
       ics, DS IDS(i') |- lookupAll(name) --> m;
       DS IDS(i') |- Call(m, args) --> v;
       Done() => v.
  
  MCallImplL("base_print", _, [v]) --> v
    where
      nativePrint(v) => _.
  
  ics |- MCallImplL(name, _, vs@[]) --> v
    where
      ics |- lookupAll(name) --> m;
      ics |- Call(m, vs) --> v.
  
  ics |- MCallImplL(name, _, vs) --> v
    where
      ics |- lookupAll(name) --> m;
      ics |- Call(m, vs) --> v.
  
  ics, ids |- Constant(name, _, _, e1) --> Done()
    where
      ids |- e1 --> v;
      ids |- readObject(ids) --> Object(enc, sup, tbl);
      ids |- allocateMethod(Method([], [Wrapped(v)], ids)) --> iMethod;
      writeObject(ids, Object(enc, sup, {name |--> iMethod, tbl} )) --> _.
  
  ics, ids |- MethodDeclL(_, name, _, _, pNames, _, _, code, _) --> Done()
    where
      ids |- allocateMethod(Method(pNames, code, ids)) --> iMethod;
      ids |- readObject(ids) --> Object(enc, sup, tbl);
      ids |- writeObject(ids, Object(enc, sup, {name |--> iMethod, tbl})) --> _.
  
  ics, ids |- ObjectDecl(_, [], cs) --> ObjectRef(i')
    where
//      Ref ids |- eInherit --> Ref oInh;
      ics -s-> iics;
      ids -s-> iids;
      print(NumV(iics)) => _;
      print(NumV(iids)) => _;
      iics == iids;
      
      fresh => superi;
      writeObject(superi, NoObject()) --> _;
      allocateObject(Object(ids, superi, {})) --> i';
      CS ICS(i'), DS IDS(i') |- cs --> _.
      
  ics |- Call(Method(names, code, ds), values) --> v
    where
      readObject(ics) --> Object(enc, sup, tbl);
      print(getMembers(tbl)) => _;
      saveConstants(names, values, tbl) --> tbl';
      writeObject(ics, Object(enc, sup, tbl')) --> _;
      print(getMembers(tbl')) => _;
      ics, DS IDS(ds) |- code --> v;
      writeObject(ics, Object(enc, sup, tbl)) --> _. // restore
  
  saveConstants(names : List(String), values: List(V), tbl : Members) --> tbl'''
    where
      case names of {
        [] =>
          tbl => tbl'''
        [n | ns] =>
          values => [v|vs];
          saveConst(n, v, tbl) --> tbl';
          saveConstants(ns, vs, tbl) --> tbl'';
          {tbl'', tbl'} => tbl'''
      }.
      
  ics, ids |- saveConst(name, v, tbl) :: MH --> tbl' :: MH'
    where
      fresh => iMethod;
      writeMethod(iMethod, Method([], [Wrapped(v)], ids)) :: MH --> _ :: MH';
      {name |--> iMethod, tbl} => tbl'.
      

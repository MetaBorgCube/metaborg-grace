module trans/semantics

imports
  src-gen/ds-signatures/grace-sig
  src-gen/ds-signatures/grace-lowered-sig
  
  trans/values
  trans/store
  trans/environment

signature

  arrows
    Program -init-> V
    
    Exp --> V
    CodeSequence --> V
    Declaration --> V
    Assignment --> V
    CallArgs --> V
    List(CodeSequence) --> V
    Params --> List(String)
    
    Exp -o-> O
    Declaration -o-> O   
  
    List(Exp) -ea-> List(V)
    
  constructors
    
    lookupAll: String --> O
  
    saveConst: String * V * Members --> Members
    saveConstants: List(String) * List(V) * Members --> Members
    
  native operators
    nativeIBinOp: String * Int * Int -> Int
    nativePrint: V -> V
    
rules

  Ref i |- Expression(e) :: OH --> e :: OH
    where
      print(NumV(i)) => _;
      print(getOHeap(OH)) => _.
  
  Declaration(e) --> e.
  Wrapped(v) --> v.
  Assignment(e) --> e.

  Number(s) --> NumV(parseNumber(s)).
  ArgNumber(s) --> NumV(parseNumber(s)).
  ArgString(s) --> StringV(s).
  String(s) --> StringV(s).

  Program(cs, _) -init-> cs'
    where
      Ref fresh |- allocateObject(NoObject()) :: OHeap {} --> i;
      Ref i |- cs :: OHeap {} --> cs' :: OHeap _.
  
  cs : List(CodeSequence) --> v'
    where
      case cs of {
        [] =>
          Done() => v'
        [code | [] ] =>  //needed for final value
          code --> v'
        [code | cs'] =>
          code --> _;
          cs' --> v'

      }.

  [] : List(Exp) -ea-> [].
  
  [arg] : List(Exp) -ea-> [v]
    where
      arg --> v.
  
  [arg | more] : List(Exp) -ea-> [v | vs]
    where
      arg --> v;
      more -ea-> vs : List(V).

  Ref ics |- MCallCanonicalL(receiver, name, _, args) --> v
    where
       Ref ics |- receiver --> ObjectRef(i');
       Ref i' |- lookupAll(name) --> m;
       Ref i' |- Call(m, args) --> v;
       Done() => v.
  
  Ref ics |- MCallImplL(name, _, []) --> v
    where
      Ref ics |- lookupAll(name) --> m;
      Ref ics |- Call(m, []) --> v.
  
  Ref ics |- MCallImplL(name, _, args) --> v
    where
      Ref ics |- lookupAll(name) --> m@Method(_, _, _);
      Ref ics |- args -ea-> argVs;
      Ref ics |- Call(m, argVs) --> v.
  
  Ref ids |- Constant(name, _, _, e1) --> Done()
    where
      Ref ids |- e1 --> v;
      readObject(ids) --> Object(enc, sup, tbl);
      allocateMethod(Method([], [Wrapped(v)], ids)) --> iMethod;
      writeObject(ids, Object(enc, sup, {name |--> iMethod, tbl} )) --> _.
  
  Ref ids |- MethodDeclL(_, name, _, _, pNames, _, _, code, _) --> Done()
    where
      Ref ids |- allocateMethod(Method(pNames, code, ids)) --> iMethod;
      Ref ids |- readObject(ids) --> Object(enc, sup, tbl);
      Ref ids |- writeObject(ids, Object(enc, sup, {name |--> iMethod, tbl})) --> _.
  
  Ref ids |- ObjectDecl(_, [], cs) --> ObjectRef(i')
    where
//      Ref ids |- eInherit --> Ref oInh;
      allocateObject(Object(ids, fresh, {})) --> i';
      Ref i' |- cs --> _.
      
  Ref ics |- Call(Method(names, code, ds), values) --> v
    where
      readObject(ics) --> Object(enc, sup, tbl);
      saveConstants(names, values, tbl) --> tbl';
      writeObject(ics, Object(enc, sup, tbl')) --> _;
      Ref ics, Ref ds |- code --> v.
      
  Ref ics |- lookupAll(name) --> m
    where
      // local
      // inherit
      // enclosing
      print(StringV("lookup")) => _;
      print(StringV(name)) => _;
      readObject(ics) --> Object(_, _, tbl);
      case tbl[name?] of {
        true =>
          readMethod(tbl[name]) --> m
        otherwise => // TODO
          Method(["test"], [], ics) => m
      }.
  
  saveConstants(names : List(String), values: List(V), tbl : Members) --> tbl'''
    where
      print(StringV("saving constants")) => _;
      case names of {
        [] =>
          tbl => tbl'''
        [n | ns] =>
          values => [v|vs];
          saveConst(n, v, tbl) --> tbl';
          saveConstants(ns, vs, tbl) --> tbl'';
          {tbl'', tbl'} => tbl'''
      }.
      
  Ref ids |- saveConst(name, v, tbl) --> tbl'
    where 
      fresh => iMethod;
      writeMethod(ids, Method([], [Wrapped(v)], ids)) --> _;
      {name |--> iMethod, tbl} => tbl'.
      

module trans/desugar/desugar-matchcase

imports
    
    src-gen/signatures/grace-sig
    src-gen/signatures/grace-lowered-sig
    src-gen/signatures/general-sig
    
    trans/desugar/desugar-common

rules

desugar-case(|liftedname): 
  Case(ExpParens(caseExpression), a, body) ->
  <desugar-case(|liftedname)> Case(CaseExp(caseExpression), a, body)

desugar-case(|liftedname):
  Case(CaseExp(CString(str)), a, body) ->
    <desugar-case(|liftedname, String(str))>
      Case(ExpTyped(innername, TypeID(ID("String"), NoTypeArg())), a, body)
  where
    innername := <concat-strings> ["s_", <new>]

desugar-case(|liftedname):
  Case(CaseExp(CNumber(num)), a, body) ->
    <desugar-case(|liftedname, Number(num))>
      Case(ExpTyped(innername, TypeID(ID("Number"), NoTypeArg())), a, body)
  where
    innername := <concat-strings> ["n_", <new>]
    
desugar-case(|liftedname):
  Case(CaseExp(CBoolean(bool)), a, body) ->
    <desugar-case(|liftedname, Boolean(bool))>
      Case(ExpTyped(innername, TypeID(ID("Boolean"), NoTypeArg())), a, body)
  where
    innername := <concat-strings> ["b_", <new>]

desugar-case(|liftedname):
  Case(CIdentifier(WildCard()), a, body) -> 
    <desugar-case(|liftedname)>
      Case(ExpTyped(<concat-strings> ["u_", <new>], TypeID(ID("Unknown"), NoTypeArg())), a, body)
      
desugar-case(|liftedname):
  Case(CIdentifier(iden), a, body) -> 
    <desugar-case(|liftedname)>
      Case(ExpTyped(iden, TypeID(ID("Unknown"), NoTypeArg())), a, body)

desugar-case(|liftedname):
  Case(ExpTyped(iden, TypeID(typeId, NoTypeArg())), _, body) ->
    [ MCallWDot(
        BlockExp(
          BlockWParams(
            BlockParams([ParamWType( iden, NoTypeAnn() )])
          , [ Expression(
                MCallWDot(
                  MCallImpl([Part( typeId , NoArgs())])
                , [ Part(
                      ID("match")
                    , ArgsParen([MCallImpl([Part( iden , NoArgs())])])
                    )
                  ]
                )
              )
            ]
          )
        )
      , [ Part(
            ID("apply")
          , ArgsParen([MCallImpl([Part(ID( liftedname ), NoArgs())])])
          )
        ]
      )
    , BlockExp(Block( body ))
    ]

desugar-case(|liftedname, matchExpr):
  Case(ExpTyped(iden, TypeID(typeId, NoTypeArg())), _, body) ->
    [ BlockExp(
        BlockWParams(
          BlockParams([])
        , [ Expression(
              MCallWDot(
                MCallWDot(
                  MCallImpl([Part( typeId , NoArgs())])
                , [ Part(
                      ID("match(_)")
                    , ArgsParen([MCallImpl([Part(ID( liftedname ), NoArgs())])])
                    )
                  ]
                )
              , [ Part(
                    ID("&&(_)")
                  , ArgsParen(
                      [ MCallWDot(
                          MCallImpl([Part(ID( liftedname ), NoArgs())])
                        , [Part(ID("==(_)"), ArgsParen([ matchExpr ]))]
                        )
                      ]
                    )
                  )
                ]
              )
            )
          ]
        )
      )    
    , BlockExp(Block( body ))
    ]

desugar-case(|liftedname): a -> <fail>
 where
   <debug(!"error: unkown case type: ")> a

desugar-caseparen-to-case: CaseParen(a,b,c) -> Case(a,b,c)
desugar-caseparen-to-case: Case(a,b,c) -> Case(a,b,c)

desugar-match-case:
  MatchCase(matchExpression, cases) -> 
    MCallWDot(
      BlockExp(
        BlockWParams(
          BlockParams([ParamWType(ID(liftedname), NoTypeAnn())])
        , [ Expression(
              MCallImpl(
                [Part(
                  ID(methodName)
                , ArgsParen(
                    cases''
                  )
                )]
              )
            )
          ]
        )
      )
    , [Part(ID("apply"), ArgsParen([matchExpression]))]
    )
      where
        <debug(!"match on matchcase expression: ")> matchExpression;
        liftedname := <concat-strings> ["m_", <new>];
        <debug(!"new name: ")> liftedname;
        cases' := <map(desugar-caseparen-to-case)> cases;
        <debug(!"removed caseparen: ")> cases';
        cases'' := <flatten-list> <map(desugar-case(|liftedname))> cases';
        <debug(!"desugared cases: ")> cases'';
        numParts := <length> cases'';
        list := <range> <int-dec> <int-dec> numParts;
        <debug(!"list so far: ")> list;
        listNames := <map(!"elseif(_)then(_)")> list;
        methodName := <concat-strings> ["if(_)then(_)" | listNames];
        <debug(!"method name: ")> methodName

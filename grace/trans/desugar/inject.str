module trans/desugar/inject

imports

    libstratego-lib
    libstratego-gpp
    libstratego-aterm
    src-gen/signatures/grace-sig
    src-gen/signatures/grace-lowered-sig
    src-gen/signatures/General-sig

rules

  inject-all = inject-booleans

  inject-booleans: Program([c | cs ], b) -> Program([
          Declaration(
            MethodDecl(
              NoPrefix()
            , [MethodID(ID("print"), Params([Param("obj")]))]
            , NoAnnotations()
            , MethodBody(
                [ Expression(
                    MCallImpl(
                      [ Part(
                          ID("base_print")
                        , ArgsParen(
                            [ MCallWDot(
                                MCallImpl([Part(ID("obj"), NoArgs())])
                              , [Part(ID("asString"), NoArgs())]
                              )
                            ]
                          )
                        )
                      ]
                    )
                  )
                ]
              )
            )
          )
        , Declaration(
            MethodDecl(
              NoPrefix()
            , [MethodID(ID("base_number"), NoParams())]
            , NoAnnotations()
            , MethodBody(
                [ Expression(
                    ObjectDecl(
                      NoInherit()
                    , []
                    , [ Declaration(Constant("value", NoAnnotations(), Number("0")))
                      , Declaration(
                          MethodDecl(
                            NoPrefix()
                          , [MethodID(ID("asString"), NoParams())]
                          , NoAnnotations()
                          , MethodBody(
                              [Expression(MCallImpl([Part(ID("value"), NoArgs())]))]
                            )
                          )
                        )
                      ]
                    )
                  )
                ]
              )
            )
          ),
          
          Declaration(
            ConstantL(
              "true"
            , NoAnnotations()
            , ObjectL(
                NoInherit()
              , []
              , [ Declaration(
                    MethodL(
                      "ifTrue"
                    , NoAnnotations()
                    , ["blk"]
                    , [Expression(MCallRecvL(MCallL("blk", []), "apply", []))]
                    )
                  )
                , Declaration(MethodL("ifFalse", NoAnnotations(), ["blk"], []))
                , Declaration(
                    MethodL(
                      "ifTrue_ifFalse"
                    , NoAnnotations()
                    , ["blk1", "blk2"]
                    , [Expression(MCallRecvL(MCallL("blk1", []), "apply", []))]
                    )
                  )
                , Declaration(
                    MethodL("||", NoAnnotations(), ["other"], [Expression(Self())])
                  )
                , Declaration(
                    MethodL(
                      "&&"
                    , NoAnnotations()
                    , ["other"]
                    , [Expression(MCallL("other", []))]
                    )
                  )
                , Declaration(
                    MethodL("asString", NoAnnotations(), [], [Expression(String("\"true\""))])
                  )
                ]
              )
            )
          )
        , Declaration(
            ConstantL(
              "false"
            , NoAnnotations()
            , ObjectL(
                NoInherit()
              , []
              , [ Declaration(MethodL("ifTrue", NoAnnotations(), ["blk"], []))
                , Declaration(
                    MethodL(
                      "ifFalse"
                    , NoAnnotations()
                    , ["blk"]
                    , [Expression(MCallRecvL(MCallL("blk", []), "apply", []))]
                    )
                  )
                , Declaration(
                    MethodL(
                      "ifTrue_ifFalse"
                    , NoAnnotations()
                    , ["blk1", "blk2"]
                    , [Expression(MCallRecvL(MCallL("blk2", []), "apply", []))]
                    )
                  )
                , Declaration(
                    MethodL(
                      "||"
                    , NoAnnotations()
                    , ["other"]
                    , [Expression(MCallL("other", []))]
                    )
                  )
                , Declaration(
                    MethodL("&&", NoAnnotations(), ["other"], [Expression(Self())])
                  )
                , Declaration(
                    MethodL("asString", NoAnnotations(), [], [Expression(String("\"false\""))])
                  )
                ]
              )
            )
          ), c | cs], b)
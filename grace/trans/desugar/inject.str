module trans/desugar/inject

imports

    libstratego-lib
    libstratego-gpp
    libstratego-aterm
    src-gen/signatures/grace-sig
    src-gen/signatures/grace-lowered-sig
    src-gen/signatures/General-sig

rules
  
  inject-all = inject-booleans

  inject-booleans: Program([c | cs ], b) -> Program([Declaration(
            Constant(
              "true"
            , NoAnnotations()
            , ObjectDecl(
                NoInherit()
              , []
              , [ Declaration(
                    MethodDeclL(
                      "ifTrue"
                    , NoAnnotations()
                    , ["blk"]
                    , [ Expression(
                          MCallCanonicalL(
                            MCallImplL("blk", [])
                          , "apply"
                          , []
                          )
                        )
                      ]
                    )
                  )
                , Declaration(
                    MethodDeclL(
                      "ifFalse"
                    , NoAnnotations()
                    , ["blk"]
                    , []
                    )
                  )
                , Declaration(
                    MethodDeclL(
                      "||"
                    , NoAnnotations()
                    , ["other"]
                    , [Expression(Self())]
                    )
                  )
                , Declaration(
                    MethodDeclL(
                      "&&"
                    , NoAnnotations()
                    , ["other"]
                    , [Expression(MCallImplL("other", []))]
                    )
                  )
                , Declaration(
                    MethodDeclL(
                      "asString"
                    , NoAnnotations()
                    , []
                    , [Expression(String("\"true\""))]
                    )
                  )
                ]
              )
            )
          )
        , Declaration(
            Constant(
              "false"
            , NoAnnotations()
            , ObjectDecl(
                NoInherit()
              , []
              , [ Declaration(
                    MethodDeclL(
                      "ifTrue"
                    , NoAnnotations()
                    , ["blk"]
                    , []
                    )
                  )
                , Declaration(
                    MethodDeclL(
                      "ifFalse"
                    , NoAnnotations()
                    , ["blk"]
                    , [ Expression(
                          MCallCanonicalL(
                            MCallImplL("blk", [])
                          , "apply"
                          , []
                          )
                        )
                      ]
                    )
                  )
                , Declaration(
                    MethodDeclL(
                      "||"
                    , NoAnnotations()
                    , ["other"]
                    , [Expression(MCallImplL("other", []))]
                    )
                  )
                , Declaration(
                    MethodDeclL(
                      "&&"
                    , NoAnnotations()
                    , ["other"]
                    , [Expression(Self())]
                    )
                  )
                , Declaration(
                    MethodDeclL(
                      "asString"
                    , NoAnnotations()
                    , []
                    , [Expression(String("\"false\""))]
                    )
                  )
                ]
              )
            )
          ), c | cs], b)
module trans/desugar/inject

imports

    libstratego-lib
    libstratego-gpp
    libstratego-aterm
    src-gen/signatures/grace-sig
    src-gen/signatures/grace-lowered-sig
    src-gen/signatures/general-sig

rules

  inject-all: Program([c | cs ], b) -> Program([Expression(ObjectL(NoInherit(),[],[
          Declaration(
            MethodL(
              "print"
            , NoAnnotations()
            , ["obj"]
            , [ Expression(
                  MCallL(
                    "base_print"
                  , [MCallRecvL(MCallL("obj", []), "asString", [])]
                  )
                )
              ]
            )
          )
        ,
          Declaration(
                  MethodL(
                    "base_number"
                  , NoAnnotations()
                  , []
                  , [ Expression(
                        ObjectL(
                          NoInherit()
                        , []
                        , [ Declaration(
                              ConstantL(
                                "value"
                              , NoAnnotations()
                              , NumL("0")
                              )
                            )
                          , Declaration(
                              MethodL(
                                "asString"
                              , NoAnnotations()
                              , []
                              , [Expression(MCallL("value", []))]
                              )
                            )
                          , Declaration(
                              MethodL(
                                "+"
                              , NoAnnotations()
                              , ["other"]
                              , [ Expression(
                                    MCallL(
                                      "base_plus"
                                    , [MCallL("value", []), MCallRecvL(MCallL("other", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          , Declaration(
                              MethodL(
                                "-"
                              , NoAnnotations()
                              , ["other"]
                              , [ Expression(
                                    MCallL(
                                      "base_minus"
                                    , [MCallL("value", []), MCallRecvL(MCallL("other", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          , Declaration(
                              MethodL(
                                "*"
                              , NoAnnotations()
                              , ["other"]
                              , [ Expression(
                                    MCallL(
                                      "base_mult"
                                    , [MCallL("value", []), MCallRecvL(MCallL("other", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          , Declaration(
                              MethodL(
                                "/"
                              , NoAnnotations()
                              , ["other"]
                              , [ Expression(
                                    MCallL(
                                      "base_div"
                                    , [MCallL("value", []), MCallRecvL(MCallL("other", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          , Declaration(
                              MethodL(
                                "-"
                              , NoAnnotations()
                              , []
                              , [ Expression(
                                    MCallL(
                                      "base_negative"
                                    , [MCallRecvL(MCallL("value", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          , Declaration(
                              MethodL(
                                ">"
                              , NoAnnotations()
                              , ["other"]
                              , [ Expression(
                                    MCallL(
                                      "base_gt"
                                    , [MCallL("value", []), MCallRecvL(MCallL("other", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          , Declaration(
                              MethodL(
                                ">="
                              , NoAnnotations()
                              , ["other"]
                              , [ Expression(
                                    MCallL(
                                      "base_gte"
                                    , [MCallL("value", []), MCallRecvL(MCallL("other", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          , Declaration(
                              MethodL(
                                "<"
                              , NoAnnotations()
                              , ["other"]
                              , [ Expression(
                                    MCallL(
                                      "base_lt"
                                    , [MCallL("value", []), MCallRecvL(MCallL("other", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          , Declaration(
                              MethodL(
                                "<="
                              , NoAnnotations()
                              , ["other"]
                              , [ Expression(
                                    MCallL(
                                      "base_lte"
                                    , [MCallL("value", []), MCallRecvL(MCallL("other", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          , Declaration(
                              MethodL(
                                "=="
                              , NoAnnotations()
                              , ["other"]
                              , [ Expression(
                                    MCallL(
                                      "base_eq"
                                    , [MCallRecvL(Self(), "value", []), MCallRecvL(MCallL("other", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          , Declaration(
                              MethodL(
                                "!="
                              , NoAnnotations()
                              , ["other"]
                              , [ Expression(
                                    MCallL(
                                      "base_neq"
                                    , [MCallL("value", []), MCallRecvL(MCallL("other", []), "value", [])]
                                    )
                                  )
                                ]
                              )
                            )
                          ]
                        )
                      )
                    ]
                  )
                )
                ,          
          Declaration(
            ConstantL(
              "true"
            , NoAnnotations()
            , ObjectL(
                NoInherit()
              , []
              , [ Declaration(
                    MethodL(
                      "ifTrue"
                    , NoAnnotations()
                    , ["blk"]
                    , [Expression(MCallRecvL(MCallL("blk", []), "apply", []))]
                    )
                  )
                , Declaration(MethodL("ifFalse", NoAnnotations(), ["blk"], []))
                , Declaration(
                    MethodL(
                      "ifTrue_ifFalse"
                    , NoAnnotations()
                    , ["blk1", "blk2"]
                    , [Expression(MCallRecvL(MCallL("blk1", []), "apply", []))]
                    )
                  )
                , Declaration(
                    MethodL("||", NoAnnotations(), ["other"], [Expression(Self())])
                  )
                , Declaration(
                    MethodL(
                      "&&"
                    , NoAnnotations()
                    , ["other"]
                    , [Expression(MCallL("other", []))]
                    )
                  )
                , Declaration(
                    MethodL("asString", NoAnnotations(), [], [Expression(String("\"true\""))])
                  )
                ]
              )
            )
          )
        , Declaration(
            ConstantL(
              "false"
            , NoAnnotations()
            , ObjectL(
                NoInherit()
              , []
              , [ Declaration(MethodL("ifTrue", NoAnnotations(), ["blk"], []))
                , Declaration(
                    MethodL(
                      "ifFalse"
                    , NoAnnotations()
                    , ["blk"]
                    , [Expression(MCallRecvL(MCallL("blk", []), "apply", []))]
                    )
                  )
                , Declaration(
                    MethodL(
                      "ifTrue_ifFalse"
                    , NoAnnotations()
                    , ["blk1", "blk2"]
                    , [Expression(MCallRecvL(MCallL("blk2", []), "apply", []))]
                    )
                  )
                , Declaration(
                    MethodL(
                      "||"
                    , NoAnnotations()
                    , ["other"]
                    , [Expression(MCallL("other", []))]
                    )
                  )
                , Declaration(
                    MethodL("&&", NoAnnotations(), ["other"], [Expression(Self())])
                  )
                , Declaration(
                    MethodL("asString", NoAnnotations(), [], [Expression(String("\"false\""))])
                  )
                ]
              )
            )
          ), c | cs]))], b)
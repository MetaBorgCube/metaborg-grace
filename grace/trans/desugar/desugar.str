module trans/desugar/desugar

imports
    
    libstratego-lib
    libstratego-gpp
    libstratego-aterm
    src-gen/signatures/grace-sig
    src-gen/signatures/grace-lowered-sig
    src-gen/signatures/General-sig
    
    trans/desugar/desugar-common
    trans/desugar/lower

rules

  desugar-all = innermost(desugar)
  
  desugar = 
            desugar-class-declaration <+
            
            desugar-flatten-methodID <+
            desugar-flatten-methodPart <+
            
            desugar-blockExp <+
            desugar-block <+
            desugar-block-to-object <+
            desugar-arg-noargs <+
            desugar-arg-argsparen <+
			desugar-argBlock <+
            
            desugar-flatten-objectdecl <+
            desugar-flatten-declaration <+
            desugar-fail

  desugar-all-post = innermost(desugar-post)
  
  desugar-post = lower-all
  
  desugar-pre = desugar-program <+ desugar-fail

  desugar-program: Program(a, b) -> Program([Expression(ObjectDecl(NoInherit(), [], a))], b)
  
  desugar-flatten-methodID: [ MethodID(
      ID(name1)
    , Params(params1)
    )
  , MethodID(
      ID(name2)
    , Params(params2)
    )
  | mids ] -> [MethodID(
      ID(<concat-strings> [name1, "_", name2])
    , Params(<concat> [params1,params2])
    ) | mids ]
    
  desugar-flatten-methodPart: [Part(ID(name1),args1), Part(ID(name2),args2)] ->
    [Part(ID(<concat-strings> [name1, "_", name2]), ArgsParen(<map(desugar-arg)> [args1, args2]))]
    
  desugar-flatten-methodPart: [Part(ID(name1),args1), Part(ID(name2),args2), Part(ID(name3), args3)] ->
    [Part(ID(<concat-strings> [name1, "_", name2, "_", name3]), ArgsParen(<map(desugar-arg)> [args1, args2, args3]))]
  
  desugar-flatten-methodPart: [Part(ID(name1), ArgsParen(args)),Part(ID(name2),args2)] ->
    [Part(ID(<concat-strings> [name1, "_", name2]), ArgsParen(<map(desugar-arg)> <concat> [args, [args2]]))]

  desugar-flatten-objectdecl: ObjectDecl(a, b, xs) -> ObjectDecl(a, b, ys)
    where
      ys := <flatten-list> xs;
      <not(eq)> (xs, ys)
        
  desugar-flatten-declaration: Declaration([a, b]) ->
      [Declaration(a), Declaration(b)]

  desugar-arg:  ArgNumber(a) -> Number(a)
  desugar-arg: ArgBoolean(a) -> Boolean(a)
  desugar-arg:  ArgsParen(a) -> a
  desugar-arg:             a -> a

  desugar-arg-noargs: ArgsParen([NoArgs(), b]) -> ArgsParen([b])
  desugar-arg-noargs: ArgsParen([b, NoArgs()]) -> ArgsParen([b])
  desugar-arg-argsparen: ArgsParen([NoArgs()]) -> NoArgs()
  desugar-arg-argsparen: ArgsParen(as@[_ | _]) ->
    ArgsParen( <flatten-list> <map(strip-argsparen)> as)
  
  strip-argsparen: ArgsParen(a) -> a
  
  desugar-argBlock: ArgBlock(o) -> ArgsParen([o])
  desugar-blockExp: BlockExp(e) -> e
  
  desugar-block:
    Block(BlockWParams(a, b)) -> BlockWParams(a, b)
   
  desugar-block:
    Block(a) -> BlockWParams(BlockParams(NoParams()), a) 

  desugar-block-to-object:
    BlockWParams(BlockParams(NoParams()), code)-> 
      ObjectDecl(
        NoInherit(),
        [],
        [ Declaration(
            MethodDecl(
              NoPrefix()
            , [MethodID(ID("apply"), NoParams())]
            , NoAnnotations()
            , MethodBody(code)
            )
          )
        ]
      )
      
  desugar-block-to-object:
    BlockWParams(BlockParams(params), code)-> 
      ObjectDecl(
        NoInherit(),
        [],
        [Declaration(
          MethodDecl(
            NoPrefix()
          , [MethodID(ID("apply"), Params(params))]
          , NoAnnotations()
          , MethodBody(code)
          )
        )]
      )

  desugar-class-declaration:
    ClassDecl(mIDs, inh, use, code) ->
      MethodDecl(NoPrefix(),mIDs,NoAnnotations(),MethodBody([Expression(ObjectDecl(inh,use,code))]))
  
  part-to-nameList:
    (Part(name, _), list) -> [list, <name-to-string> name]

  part-to-argList:
    (Part(_, args), list) -> [list, args]

  desugar-fail: a -> <fail>

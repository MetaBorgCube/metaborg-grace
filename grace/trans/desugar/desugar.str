module trans/desugar/desugar

imports
    
    src-gen/signatures/grace-sig
    src-gen/signatures/grace-lowered-sig
    src-gen/signatures/general-sig
    
    trans/desugar/desugar-common
    trans/desugar/lower

rules
  
  desugar-pre = desugar-program <+ desugar-fail

  desugar-all = innermost(desugar)
  
  desugar =
    desugar-class-declaration
    <+ desugar-flatten-methodID
    <+ desugar-flatten-methodPart
    <+ desugar-blockExp 
    <+ desugar-block
    <+ desugar-block-to-object
    <+ desugar-arg-noargs
    <+ desugar-arg-argsparen
    <+ desugar-argBlock
    <+ desugar-flatten-objectdecl
    <+ desugar-flatten-declaration
    <+ desugar-unquote-strings
  
  desugar-all-post: ast -> <lower-post-all> <lower-all> ast

  desugar-program: Program(a, b) -> Program([Expression(ObjectDecl(NoInherit(), [], a))], b)
  
  desugar-class-declaration:
    ClassDecl(mIDs, inh, use, code) ->
      MethodDecl(
        NoPrefix(), mIDs, NoAnnotations(),
        MethodBody([
          Expression(ObjectDecl(inh,use,code))
        ])
      )
  
  desugar-flatten-methodID: [ MethodID(ID(n1), Params(p1)), MethodID(ID(n2), Params(p2)) | mids ] ->
      [MethodID(ID(name), Params(ps)) | mids ]
    with
      name := <concat-strings> [n1, "_", n2];
      ps   := <concat> [p1,p2]
    
  desugar-flatten-methodPart: [Part(ID(n1), args1), Part(ID(n2), args2) | ps ] ->
      [Part(ID(name), ArgsParen(args)) | ps]
    with
      name := <concat-strings> [n1, "_", n2];
      args := <flatten-list> <map(desugar-arg)> [args1, args2]

  desugar-flatten-objectdecl: ObjectDecl(a, b, xs) -> ObjectDecl(a, b, ys)
    where
      ys := <flatten-list> xs;
      <not(eq)> (xs, ys)
        
  desugar-flatten-declaration: Declaration([a, b]) ->
      [Declaration(a), Declaration(b)]

  desugar-arg:  ArgNumber(a) -> Number(a)
  desugar-arg: ArgBoolean(a) -> Boolean(a)
  desugar-arg:  ArgsParen(a) -> a
  desugar-arg:             a -> a

  desugar-arg-noargs: ArgsParen(as) -> ArgsParen(as')
    where
      as' := <flatten-list> <filter-no-args> as;
      <not(eq)> (as, as')

  filter-no-args: [NoArgs() | as] -> [<filter-no-args> as]  
  filter-no-args: [a | as] -> [a | <filter-no-args> as]
  filter-no-args: [] -> []
  
  desugar-arg-argsparen: ArgsParen(as@[_ | _]) ->
    ArgsParen( <flatten-list> <map(strip-argsparen)> as)
  
  strip-argsparen: ArgsParen(a) -> a
  
  desugar-argBlock: ArgBlock(o) -> ArgsParen([o])
  desugar-blockExp: BlockExp(e) -> e
  
  desugar-block:
    Block(BlockWParams(a, b)) -> BlockWParams(a, b)
   
  desugar-block:
    Block(a) -> BlockWParams(BlockParams(NoParams()), a) 

  desugar-block-to-object:
    BlockWParams(BlockParams(NoParams()), code)-> 
      ObjectDecl(
        NoInherit(),
        [],
        [ Declaration(
            MethodDecl(
              NoPrefix()
            , [MethodID(ID("apply"), NoParams())]
            , NoAnnotations()
            , MethodBody(code)
            )
          )
        ]
      )
      
  desugar-block-to-object:
    BlockWParams(BlockParams(params), code) -> 
      ObjectDecl(NoInherit(), [], [Declaration(
        MethodDecl(
          NoPrefix()
        , [MethodID(ID("apply"), Params(params))]
        , NoAnnotations()
        , MethodBody(code)
        )
      )])

  desugar-unquote-strings:
    String(s) -> String(<unquote(?'"')> s)

  desugar-fail: a -> <fail>

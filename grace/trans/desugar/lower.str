module trans/desugar/lower

imports

  src-gen/signatures/grace-sig
  src-gen/signatures/grace-lowered-sig
  src-gen/signatures/general-sig
    
  trans/desugar/common
  trans/desugar/analyse

rules

  lower-all = innermost(lower)
  
  lower = lower-mdecl <+
          lower-methodcallwdot <+
          lower-mcallopex <+
          lower-mcallimpl <+
          lower-mcallwdot <+
          lower-objectdecl <+
          lower-constant <+
          lower-variable <+
          lower-block <+
          lower-type-unknown <+
          lower-typerule <+
          lower-fail

  lower-post-all: ast -> <topdown(lower-post-analyse)> <topdown(try(lower-post-2))> <topdown(try(lower-post-1))> ast

  lower-post-1 =
          flatten-statements-declaration <+
          lower-fail

  lower-post-2 =
          flatten-statements <+
          lower-fail
  
  lower-post-analyse = id

  lower-methodcallwdot:
    MCallWDot(recv, [Part(idf, args)]) ->
      MCallRecvL(recv, <name-to-id> idf, as)
        with
          as := <flatten-list> <lower-arguments> args

  lower-mcallopex:
    MCallOpEx(recv, name, arg) ->
      MCallRecvL(recv, <name-to-id> name, [arg])

  lower-mcallimpl: 
    MCallImpl([Part(name , args)]) -> MCallL(name, as)
      with
        as := <flatten-list> <lower-arguments> args

  lower-mdecl:
    MethodDecl(Multiple([MethodID(mName, typeArgs, ps)]), annotations, RH(te), MethodBody(cs)) ->
      MethodL(name, ta, annotations, params, pt, te, cs)
      with
        pt := <lower-get-param-types> ps;
        ta := <lower-get-typeargs> typeArgs;
        params := <lower-get-param-names> ps;
        name := <name-to-id> mName

  lower-mdecl:
    MethodDecl(Multiple([MethodOp(mName, typeArgs, ps)]), annotations, RH(te), MethodBody(cs)) ->
      MethodL(name, ta, annotations, params, pt, te, cs)
      with
        pt := <lower-get-param-types> ps;
        ta := <lower-get-typeargs> typeArgs;
        params := <lower-get-param-names> ps;
        name := <name-to-id> mName

  lower-mdecl:
    MethodDecl(Single(MethodID(mName, typeArgs)), annotations, RH(te), MethodBody(cs)) ->
      MethodL(<name-to-id> mName, ta, annotations, [], [], te, cs)
      with
        ta := <lower-get-typeargs> typeArgs

  lower-get-typeargs: TypeArg(tas) -> tas
  lower-get-typeargs: NoTypeArg() -> []
  
  lower-mcallwdot: 
    MCallWDot(recv, [Part(ID(name), args)]) ->
      MCallRecvL(recv, name, <lower-arguments> args)
  
  lower-block: BlockExp(blk) -> blk
  lower-block: BlockWParams(BlockParams(ps), cs) -> BlockL(params, types, cs)
      with
        params := <lower-get-param-names> ps;
        types := <lower-get-param-types> ps
  
  lower-objectdecl: ObjectDecl(a, b, c) -> ObjectL(<lower-inherit> a, <map(lower-use)> b, c)

  lower-inherit: Inherit(exp, mods) -> InheritL(exp, alias, exclude)
    with
      alias := <get-lowered-alias> mods;
      exclude := <get-lowered-exclude> mods

  lower-inherit: noi@NoInherit() -> noi
   
  lower-use: Use(exp, mods) -> UseL(exp, alias, exclude)
    with
      alias := <get-lowered-alias> mods;
      exclude := <get-lowered-exclude> mods

  get-lowered-alias: [] -> []
  get-lowered-alias: [AliasModifier(Single(MethodID(toId, _)), Single(MethodID(fromId, _))) | as]
    -> [AliasL(toId,fromId) | <get-lowered-alias> as]
  get-lowered-alias: [AliasModifier(Multiple([MethodID(toId, _, _)]), Multiple([MethodID(fromId, _, _)])) | as]
    -> [AliasL(toId,fromId) | <get-lowered-alias> as]
  get-lowered-alias: [a | as] -> <get-lowered-alias> as

  get-lowered-exclude: [] -> []
  get-lowered-exclude: [e@ExcludeModifier(Single(MethodID(iden, _))) | es]
    -> [ExcludeL(iden) | <get-lowered-exclude> es]
  get-lowered-exclude: [e@ExcludeModifier(Multiple([MethodID(iden, _, _)])) | es]
    -> [ExcludeL(iden) | <get-lowered-exclude> es]
  get-lowered-exclude: [e | es] -> <get-lowered-exclude> es

  lower-constant: Constant(a, t, b, c) -> ConstantL(a, <lower-typeann> t, b, c)

  lower-variable: Variable(a, t, b, NoVarInit()) ->
    VariableL(a, <lower-typeann> t, b, Uninitialized())
  lower-variable: Variable(a, t, b, VarInit(exp)) ->
    VariableL(a, <lower-typeann> t, b, exp)
  
  lower-typeann: TypeAnn(t) -> t

  lower-type-unknown: TypeID(ID("Unknown"), NoTypeArg()) -> Unkwn()

  lower-typerule: TypeRule(Single(MethodID(iden, typeArg)), RH(retType)) ->
    TypeRuleL(iden, <lower-get-typeargs> typeArg, [], retType)
  lower-typerule: 
    TypeRule(Multiple([ MethodID(iden, typeArgs, ps)]), RH(retType)) ->
      TypeRuleL(iden, <lower-get-typeargs> typeArgs, <lower-get-param-types> ps, retType)

  flatten-statements-declaration: Declaration([a,b]) -> [Declaration(a),Expression(b)]      
  
  flatten-statements: ObjectL(a, b, code) -> ObjectL(a, b, <flatten-list> code)
  flatten-statements: MethodL(n, ta, a, p, pt, t, code) ->
    MethodL(n, ta, a, p, pt, t, <flatten-list> code)
  flatten-statements: BlockL(p, t, code) -> BlockL(p, t, <flatten-list> code)
  
  lower-get-param-names: Params(ps) -> <lower-get-param-names> ps
  lower-get-param-names: [] -> []
  lower-get-param-names: [ParamWType(n, _)] -> [n]
  lower-get-param-names: [ParamWType(n, _) | bs] -> [n | <lower-get-param-names> bs ]
  
  lower-get-param-types: Params(ps) -> <lower-get-param-types> ps
  lower-get-param-types: [] -> []
  lower-get-param-types: [ParamWType(_, TypeAnn(te))] -> [te]
  lower-get-param-types: [ParamWType(_, TypeAnn(te)) | ps] ->
    [te | <lower-get-param-types> ps ]
  
  lower-arguments: ArgNumber(a) -> [Number(a)]
  lower-arguments: ArgString(a) -> [String(a)]
  lower-arguments: ArgBoolean(a) -> [Boolean(a)]
  lower-arguments: ArgLineup(a) -> [LineupExp(a)]
  lower-arguments: ArgInterpolatedString(a) -> [InterpolatedString(a)]
  lower-arguments: NoArgs() -> []
  lower-arguments: ArgsParen(as) -> <lower-arguments> as
  lower-arguments: [ArgsParen(a) | b] -> [a | <lower-arguments> b]
  lower-arguments: a -> a
  
  lower-fail: a -> <fail>
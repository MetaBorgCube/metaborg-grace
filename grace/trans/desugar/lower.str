module trans/desugar/lower

imports

    src-gen/signatures/grace-sig
    src-gen/signatures/grace-lowered-sig
    src-gen/signatures/general-sig
    
    trans/desugar/desugar-common
    trans/desugar/lower-literals

rules

  lower-all = innermost(lower)
  
  lower = lower-mdecl <+
          lower-methodcallwdot <+
          lower-mcallopex <+
          lower-mcallimpl <+
          lower-mcallwdot <+
          lower-objectdecl <+
          lower-constant <+
          lower-variable <+
          lower-block <+
//          lower-assignment <+
          lower-trait <+
          lower-fail
  
  lower-post-all: ast -> <topdown(try(lower-post-2))> <topdown(try(lower-post-1))> ast
  
  lower-post-1 =
          lower-boolean-to-object <+
          lower-number-to-object <+
          flatten-statements-declaration <+
          lower-fail
  
  lower-post-2 =
          flatten-statements <+
          lower-fail
  
  lower-methodcallwdot:
    MCallWDot(recv, [Part(idf, args)]) ->
      MCallRecvL(recv, <name-to-id> idf, as)
        with
          as := <flatten-list> <lower-arguments> args

  lower-mcallopex:
    MCallOpEx(recv, name, arg) ->
      MCallRecvL(recv, <name-to-id> name, [arg])
  
  lower-mcallimpl: 
    MCallImpl([Part(name , args)]) -> MCallL(name, as)
      with
        as := <flatten-list> <lower-arguments> args
  
  lower-mdecl:
    MethodDecl(Multiple([MethodID(mName, typeArgs, ps)]), annotations, RH(te), MethodBody(cs)) ->
      MethodL(name, ta, annotations, paramNames, te, cs)
      with
        ta := <lower-get-typeargs> typeArgs;
        paramNames := <lower-params> ps;
        name := <name-to-id> mName 

  lower-mdecl:
    MethodDecl(Multiple([MethodOp(mName, typeArgs, ps)]), annotations, RH(te), MethodBody(cs)) ->
      MethodL(name, ta, annotations, params, te, cs)
      with
        ta := <lower-get-typeargs> typeArgs;
        name := <name-to-id> mName; 
        params := <lower-params> ps
        
  lower-mdecl:
    MethodDecl(Single(MethodID(mName, typeArgs)), annotations, RH(te), MethodBody(cs)) ->
      MethodL(<name-to-id> mName, ta, annotations, [], te, cs)
      with
        ta := <lower-get-typeargs> typeArgs
  
  lower-get-typeargs: TypeArg(tas) -> tas
  lower-get-typeargs: NoTypeArg() -> []
  
//  lower-mdecl:
//    MethodDecl(Single(PrefixOp(mName)), annotations, MethodBody(cs)) ->
//      MethodL(ID(mName), annotations, [], cs)
  
  lower-mcallwdot: 
    MCallWDot(recv, [Part(ID(name), args)]) ->
      MCallRecvL(recv, name, <lower-arguments> args)
  
  lower-block: BlockExp(blk) -> blk
  lower-block: BlockWParams(BlockParams(ps), cs) -> BlockL(params, types, cs)
      with
        params := <lower-params> ps;
        types := <lower-params-types> ps
  
  lower-objectdecl: ObjectDecl(a, b, c) -> ObjectL(a,b,c)

  lower-constant: Constant(a, t, b, c) -> ConstantL(a, <lower-typeann> t, b, c) //TODO type

  lower-variable: Variable(a, t, b, NoVarInit()) -> VariableL(a, <lower-typeann> t, b, Uninitialized()) // TODO types
  lower-variable: Variable(a, t, b, VarInit(exp)) -> VariableL(a, <lower-typeann> t, b, exp) // TODO types
  
  lower-typeann: TypeAnn(t) -> t
//  lower-assignment: Assignment(a,b) -> AssignmentL(a, b)

  lower-trait: TraitDecl([MethodID(tName, ps)], MethodBody(code)) -> 
    TraitL(name, params, code)
    where
      name := <name-to-id> tName;
      params := <lower-params> ps
  
  flatten-statements-declaration: Declaration([a,b]) -> [Declaration(a),Expression(b)]      
  
  flatten-statements: ObjectL(a, b, code) -> ObjectL(a,b, <flatten-list> code)
  flatten-statements: MethodL(n, ta, a, p, t, code) -> MethodL(n, ta, a, p, t, <flatten-list> code)
  flatten-statements: BlockL(p, t, code) -> BlockL(p, t, <flatten-list> code)
  
  lower-params: Params(ps) -> <lower-params> ps
  lower-params: [] -> []
  lower-params: [ParamWType(n, _)] -> [n]
  lower-params: [ParamWType(n, _) | bs] -> [n | <lower-params> bs ]
  
  lower-params-types: Params(ps) -> <lower-params-types> ps
  lower-params-types: [] -> []
  lower-params-types: [ParamWType(_, TypeAnn(te))] -> [te]
  lower-params-types: [ParamWType(_, TypeAnn(te)) | ps] ->
    [te | <lower-params-types> ps ]
  
  lower-arguments: ArgNumber(a) -> [Number(a)]
  lower-arguments: ArgString(a) -> [String(a)]
  lower-arguments: ArgBoolean(a) -> [Boolean(a)]
  lower-arguments: ArgLineup(a) -> [LineupExp(a)]
  lower-arguments: NoArgs() -> []
  lower-arguments: ArgsParen(as) -> <lower-arguments> as
  lower-arguments: [ArgsParen(a) | b] -> [a | <lower-arguments> b]
  lower-arguments: a -> a
  
  lower-fail: a -> <fail>
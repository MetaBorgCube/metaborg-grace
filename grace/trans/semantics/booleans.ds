module trans/semantics/booleans

imports
  src-gen/ds-signatures/grace-lowered-sig
  trans/semantics/expressions
  trans/semantics/values

signature
  constructors
    BoolV : Bool -> V
    
  rules
    
    Boolean(True()) --> BoolV(true).
    
    Boolean(False()) --> BoolV(false).
    
    MCallRecvL(BoolV(a), ID("not"), []) --> BoolV(false)
      where
        a == true.
        
    MCallRecvL(BoolV(a), ID("not"), []) --> BoolV(true)
      where
        a == false.
    
    MCallRecvL(BoolV(a), ID("||(_)"), [BoolV(b)]) --> BoolV(a)
      where
        a == b.
        
    MCallRecvL(BoolV(a), ID("||(_)"), [BoolV(b)]) --> BoolV(true)
      where
        a != b.
            
    MCallRecvL(BoolV(a), ID("&&(_)"), [BoolV(b)]) --> BoolV(a)
      where
        a == b.
        
    MCallRecvL(BoolV(a), ID("&&(_)"), [BoolV(b)]) --> BoolV(false)
      where
        a != b.
    
    
    
    
//    MCallRecvL(BoolV(true), "ifTrue_ifFalse", [e1, e2]) --> v
//      where
//        e1 --> ve1;
//        e2 --> ve2;
////        a == true;
//        ve1 => ObjectRef(r);
//        S r |- lookup("apply") --> m;
//        call(m, []) --> v.
//        
//    MCallRecvL(BoolV(false), "ifTrue_ifFalse", [e1, e2]) --> v
//      where
//        e1 --> ve1;
//        e2 --> ve2;
////        a == false;
//        ve2 => ObjectRef(r);
//        S r |- lookup("apply") --> m;
//        call(m, []) --> v.
//        
//    MCallRecvL(BoolV(a), "ifTrue_ifFalse", [e1, e2]) --> Error()
//      where
//        error("Must give two blocks as arguments to this method") => _.
//    
//    
//    MCallRecvL(BoolV(a), "ifTrue", [e1]) --> v
//      where
//        e1 --> ve1;
//        a == true;
//        ve1 => ObjectRef(r);
//        S r |- lookup("apply") --> m;
//        call(m, []) --> v.
//        
//    MCallRecvL(BoolV(a), "ifTrue", [e1]) --> Done()
//      where
//        e1 --> ve1;
//        a == false. 
//    
//    MCallRecvL(BoolV(a), "ifFalse", [e1]) --> v
//      where
//        e1 --> ve1;
//        a == false;
//        ve1 => ObjectRef(r);
//        S r |- lookup("apply") --> m;
//        call(m, []) --> v.
//        
//    MCallRecvL(BoolV(a), "ifFalse", [e1]) --> Done()
//      where
//        e1 --> ve1;
//        a == true.
    
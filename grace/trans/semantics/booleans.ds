module trans/semantics/numbers

imports
  src-gen/ds-signatures/grace-sig
  src-gen/ds-signatures/grace-lowered-sig

  trans/semantics/values
  trans/semantics/store
  trans/semantics/lookup
  trans/semantics/semantics
  trans/semantics/numbers

signature

  rules
    
    Boolean(True()) --> BoolV(true).
    
    Boolean(False()) --> BoolV(false).
    
    MCallRecvL(BoolV(a), "||", [BoolV(b)]) --> BoolV(a)
      where
        a == b.
        
    MCallRecvL(BoolV(a), "||", [BoolV(b)]) --> BoolV(true)
      where
        a != b.
            
    MCallRecvL(BoolV(a), "&&", [BoolV(b)]) --> BoolV(a)
      where
        a == b.
        
    MCallRecvL(BoolV(a), "&&", [BoolV(b)]) --> BoolV(false)
      where
        a != b.
        
    MCallRecvL(BoolV(true), "ifTrue_ifFalse", [e1, e2]) --> v
      where
        e1 --> ve1;
        e2 --> ve2;
//        a == true;
        ve1 => ObjectRef(r);
        S r |- lookup("apply") --> m;
        call(m, []) --> v.
        
    MCallRecvL(BoolV(false), "ifTrue_ifFalse", [e1, e2]) --> v
      where
        e1 --> ve1;
        e2 --> ve2;
//        a == false;
        ve2 => ObjectRef(r);
        S r |- lookup("apply") --> m;
        call(m, []) --> v.
        
    MCallRecvL(BoolV(a), "ifTrue_ifFalse", [e1, e2]) --> Error()
      where
        error("Must give two blocks as arguments to this method") => _.
    
    
    MCallRecvL(BoolV(a), "ifTrue", [e1]) --> v
      where
        e1 --> ve1;
        a == true;
        ve1 => ObjectRef(r);
        S r |- lookup("apply") --> m;
        call(m, []) --> v.
        
    MCallRecvL(BoolV(a), "ifTrue", [e1]) --> Done()
      where
        e1 --> ve1;
        a == false. 
    
    MCallRecvL(BoolV(a), "ifFalse", [e1]) --> v
      where
        e1 --> ve1;
        a == false;
        ve1 => ObjectRef(r);
        S r |- lookup("apply") --> m;
        call(m, []) --> v.
        
    MCallRecvL(BoolV(a), "ifFalse", [e1]) --> Done()
      where
        e1 --> ve1;
        a == true.
    
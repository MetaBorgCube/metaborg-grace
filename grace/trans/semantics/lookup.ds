module trans/semantics/lookup

imports
  trans/semantics/values
  trans/semantics/store
  trans/semantics/context

signature

  arrows
    lookup(String) --> M
    lookupInOuter(String) --> M
    
    memberTable(Ref) --> Members

rules
  
  // look in local -> return,
  //   else look both outer and super
  //     if both, error,
  //     else return either
  
  S Self(self), C MethodC() |- lookup(name) :: L --> m
    where
      debug("lookup in method context for: '", name, "'") => _;
      case L[name?] of {
        true =>
          Method([], [Code(L[name])], self) => m
        otherwise => 
          true == false
      }.
      
  S Self(self) |- lookup(name) --> m
    where
      debug("looking in self slots (non-method context) for: '", name, "'") => _;
      print(NumV(self)) => _;
      memberTable(self) --> tbl;
      print(WrappedMembers(tbl)) => _;
      case tbl[name?] of {
        true => 
          readMethod(tbl[name]) --> m
        otherwise =>          
          debug("no such method: '", name, "' in this object") => _;
          lookupInOuter(name) --> m
      }.
  
  /*
   * Lookup in outer - recursive case (outer is a real object)
   */
  S Self(self) |- lookupInOuter(name) --> m
    where
      debug("looking in outer slots for: '", name, "'") => _;
      print(NumV(self)) => _;
      readObject(self) --> Object(outer, _);
      print(NumV(outer)) => _;
      readObject(outer) --> Object(_, tbl);
      debug("looking in outer (this object has an outer)") => _;
      debug("gotten outer") => _;
      print(NumV(outer)) => _;
      print(WrappedMembers(tbl)) => _;
      case tbl[name?] of {
        true => // outer has the name
          readMethod(tbl[name]) --> m
        otherwise => // we have to look in the next outer
          S Self(outer) |- lookupInOuter(name) --> m
      }.
  
  lookupInOuter(name) --> NoMethod(name).
  
  /*
   * Lookup in outer - base case (outer is not an object)
   */
  S Self(self) |- lookupInOuter(name) --> m
    where
      readObject(self) --> Object(outer, _);
      readObject(outer) --> NoObject();
      debug("looking in outer (this object has no outer)") => _;
      NoMethod(name) => m.
  
  /*
   * Get table of method entries from object ref
   */ 
  memberTable(r) --> tbl
    where
      readObject(r) --> Object(_, tbl).

  memberTable(r) --> {}
    where
      readObject(r) --> NoObject();
      debug("this object has no table entries because it does not exist") => _.
module trans/semantics/lookup

imports
  src-gen/ds-signatures/grace-sig
  src-gen/ds-signatures/grace-lowered-sig

  trans/semantics/values
  trans/semantics/store
  trans/semantics/context

signature

  constructors
    lookup: String --> M
    lookupSuper: String --> M
    lookupOuter: String --> M
    lookupInOuter: String --> M
    lookupLocal: String --> M
    
    getSuper: --> Ref
    getOuter: --> Ref
    
    memberTable: Ref --> Members

rules
  
  // look in local -> return,
  //   else look both outer and super
  //     if both, error,
  //     else return either
  
  DS DS(rds), C MethodC() |- lookup(name) :: L --> m
    where
      case L[name?] of {
        true =>
          Method([], [Code(L[name])], rds) => m
        otherwise => 
          true == false
      }.
      
  S Self(self) |- lookup(name) --> m
    where
      debug("looking in self slots") => _;
      memberTable(self) --> tbl;
      case tbl[name?] of {
        true => 
          readMethod(tbl[name]) --> m
        otherwise =>          
          debug("no such method: '", name, "' in this object") => _;
          lookupInOuter(name) --> m
      }.
  
  Out Outer(outer) |- lookupInOuter(name) --> m
    where
      debug("looking in outer") => _;
      readObject(outer) --> Object(outerOfOuterRef, _, tbl);
      case tbl[name?] of {
        true => // outer has the name
          readMethod(tbl[name]) --> m
        otherwise =>
          Out Outer(outerOfOuterRef) |- lookupInOuter(name) --> m
      }.
  
  Out Outer(outer) |- lookupInOuter(name) --> m
    where
      debug("looking in outer") => _;
      readObject(outer) --> NoObject();
      debug("this object has no outer") => _;
      NoMethod(name) => m.
  
//  CS CS(rcs), DS DS(rds) |- lookup(name) --> m'
//    where
//      rcs == rds;
//      lookupSuper(name) --> m;
//      case m of {
//        m'@Method(_,_,_) =>
//        NoMethod(_) =>
//          lookupOuter(name) --> m'
//      }.
//  
//  CS CS(rcs), DS DS(rds) |- lookup(name) --> m
//    where
//      rcs != rds;
//      lookupSuper(name) --> mSuper@Method(_,_,_);
//      DS DS(rcs) |- lookupSuper(name) --> mCS;
//      case mCS of {
//        m@Method(_,_,_) =>
//        NoMethod(_) =>
//          mSuper => m
//      }.
//  
//  CS CS(rcs), DS DS(rds) |- lookup(name) --> m
//    where
//      rcs != rds;
//      lookupSuper(name) --> NoMethod(name);
//      lookupOuter(name) --> m.
//
//  lookupOuter(name) --> NoMethod(name)
//    where
//      getOuter() --> r;
//      readObject(r) --> NoObject(). 
//
//  lookupOuter(name) --> m
//    where
//      getOuter() --> r;
//      CS CS(r), DS DS(r) |- lookup(name) --> m.
//  
//  lookupSuper(name) --> m'
//  where
//    lookupLocal(name) --> m;
//    case m of {
//      m'@Method(_, _, _) =>
//      NoMethod(_) =>
//        getSuper() --> sr;
//        DS DS(sr) |- lookupSuper(name) --> m'
//      NoMethodAndStop(n') =>
//        NoMethod(n') => m'
//    }.
//  
//  ds |- lookupLocal(name) --> NoMethodAndStop(name)
//    where
//      readObject(ds) --> NoObject().
// 
//  ds |- lookupLocal(name) --> m
//    where
//      readObject(ds) --> Object(_,_,_);
//      memberTable(ds) --> tbl;
//      case tbl[name?] of {
//        true =>
//          tbl[name] => mr;
//          readMethod(mr) --> m
//        otherwise =>
//          NoMethod(name) => m
//      }.
//      
//  ds |- getSuper() --> sup
//    where readObject(ds) --> Object(_, sup, _).
//
//  ds |- getSuper() --> ds
//    where readObject(ds) --> NoObject().
//    
//  ds |- getOuter() --> out
//    where readObject(ds) --> Object(out, _, _).
//
//  ds |- getOuter() --> ds
//    where readObject(ds) --> NoObject().
  
  memberTable(r) --> tbl
    where
      readObject(r) --> Object(_,_,tbl).

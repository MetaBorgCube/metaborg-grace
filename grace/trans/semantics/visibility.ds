module trans/semantics/visibility

imports
  src-gen/ds-signatures/grace-sig
  src-gen/ds-signatures/grace-lowered-sig

imports
  trans/semantics/values
  trans/semantics/store
  trans/semantics/runtime/natives
  trans/semantics/strings
  trans/semantics/numbers
  trans/semantics/lineups
  trans/semantics/objectmodel
  trans/semantics/statements
  trans/semantics/imports


/* ======= REACHABILITY CHECK ======= */
signature
  sort aliases
    HeapData = Object
  arrows
    ensure-access(String, V, Addr) --> V
    
    can-reach(Addr) --> Bool
    can-reach-map(List(Addr), Addr) --> Bool
    
rules
  
  ensure-access(x, clos@ClosV(_, _, _, _, _, true, _, _), recv) --> clos.
  
  ensure-access(x, clos@ClosV(_, _, _, _, _, false, _, _), recv) --> clos
  where
    can-reach(recv) --> visible;
    case visible of {
      false =>
            halt-error("Requested confidential method '" ++ x ++ "' of object: " ++ int2string(recv) ++ " from outside", "") --> _
      otherwise =>
    }.

  S |- can-reach(S') --> true
  where
    S == S'.

  S |- can-reach(S') --> false
  where
    S != S';
    is-stored(S) --> false.

  S |- can-reach(S') --> maybe
  where
    S != S';
    is-stored(S) --> true;
    read(S) --> Obj(_, outers, _, _);
    can-reach-map(outers, S') --> maybe.
  
  can-reach-map([], _) --> false.
  
  can-reach-map([S | ss], S') --> reachable'
  where
    S |- can-reach(S') --> reachable;
    case reachable of {
      false =>
        can-reach-map(ss, S') --> reachable'
      otherwise =>
        true => reachable'
    }.



/* ==== VISIBILITY ANNOTATION PROCESSING ==== */
signature

  arrows
    has-anno-readable(Annotations) --> Bool
    has-anno-writable(Annotations) --> Bool
    has-anno-confidential(Annotations) --> Bool
    has-anno-public(Annotations) --> Bool
    
    has-anno(List(Annotation), Annotation) --> Bool
    
    visibility-annos(Bool) --> Annotations
    
rules

  has-anno-readable(Annotations(annos)) --> has-anno(annos, Readable()).

  has-anno-writable(Annotations(annos)) --> has-anno(annos, Writable()).

  has-anno-confidential(Annotations(annos)) --> has-anno(annos, Confidential()).

  has-anno-public(Annotations(annos)) --> has-anno(annos, Public()).

  has-anno([], _) --> false.

  has-anno([anno | _], anno') --> true
  where
    anno == anno'.
 
  has-anno([anno | annos], anno') --> has-anno(annos, anno')
  where
    anno != anno'.

  visibility-annos(true) --> Annotations([Public()]).

  visibility-annos(false) --> Annotations([Confidential()]).

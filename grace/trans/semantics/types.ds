module trans/semantics/types

imports
  src-gen/ds-signatures/grace-sig
  trans/semantics/visibility
  trans/semantics/store
  trans/semantics/objectmodel

signature

  sorts
    TypeOp

  sort aliases
    Type = List(TypeRule)

  constructors
    TypeV: List(TypeRule) -> V
    TypeV: TypeOp * V * V -> V
    TypeOp: String -> TypeOp

  arrows
    TypeExp --> V

    no-type() --> TypeExp
    new-type(List(TypeRule)) --> V
    type-call(V, String, List(Exp)) --> V
    get-names(V) --> List(String)
    get-object-methods(Addr) --> List(String)
    get-type-methods(Type) --> List(String)
    methods-to-list(Methods) --> List(String)
    compare-names(List(String), List(String)) --> Bool
    contains-name(String, List(String)) --> Bool

rules

  AnonType(TypeBlock(trs)) --> new-type(trs).

  TypeExp(t) --> t.

  no-type() --> TypeID(ID("Unknown"), NoTypeArg()).

  new-type(trs) --> TypeV(trs).

  type-call(t, "match(_)", [other]) --> BoolV(compare-names(get-names(t), get-names(other))).

  get-names(v) --> t
  where
    "getting type of: " => prefix;
    case v of {
      RefV(addr) =>
        get-object-methods(addr) --> t;
        "Object Ref" => type
      StringV(_) =>
        [] => t;
        "String V" => type
      BoolV(_) =>
        [] => t;
        "Boolean V" => type
      TypeV(trs) =>
        get-type-methods(trs) --> t;
        "Type V" => type
      otherwise =>
        [] => t;
        "Unknow V" => type
    };
    log(prefix ++ type) --> _.
  
  get-object-methods(addr) --> t
  where
    read(addr) --> Obj(_,_,_,methods);
    methods-to-list(methods) --> t.
  
  get-type-methods([]) --> [] : List(String).
  get-type-methods([TypeRuleL(ID(n), _, _, _) | trs]) --> [n | get-type-methods(trs)].
  
  methods-to-list(map) --> methodnames
  where
    allkeys(map) => methodnames.
  
  compare-names([], _) --> true.
  
  compare-names(t1@[_|_],[]) --> false
  where
    log("type doesn't conform because t2 doesn't contain the types: " ++ str(t1:AST)) --> _.

  compare-names([t1|t1s], t2s) --> compare-names(t1s, t2s)
  where
    contains-name(t1, t2s) --> true;
    log("comparing names") --> _.
    
  compare-names([t1|_], t2s) --> false
  where
    contains-name(t1, t2s) --> false;
    log("comparing names, t2 is missing a type that t1 has") --> _.

  contains-name(_, []) --> false.

  contains-name(s, [s' | _]) --> true
  where
    s == s'.

  contains-name(s, [s' | ss]) --> contains-name(s, ss)
  where
    s != s'.

module trans/semantics/types

imports
  src-gen/ds-signatures/grace-sig
  trans/semantics/visibility
  trans/semantics/store
  trans/semantics/objectmodel

signature

  sort aliases
    Type = List(TypeRule)

  constructors
    TypeV: List(TypeRule) -> V

  arrows
    TypeExp --> V

    no-type() --> TypeExp
    new-type(List(TypeRule)) --> V
    type-call(V, String, List(Exp)) --> V
    get-type(V) --> Type
    get-object-type(Addr) --> Type
    methods-to-type(Methods) --> Type
    compare-types(Type, Type) --> Bool

rules

  AnonType(TypeBlock(trs)) --> new-type(trs)
  where
    log("type constructed: " ++ str(trs:AST)) --> _.

  TypeExp(t) --> t.

  no-type() --> TypeID(ID("Unknown"), NoTypeArg()).

  new-type(trs) --> TypeV(trs).

  type-call(TypeV(t), "match(_)", [other]) --> BoolV(compare-types(t, get-type(other))).

  get-type(v) --> t : List(TypeRule)
  where
    "getting type of: " => prefix;
    case v of {
      RefV(addr) =>
        get-object-type(addr) --> t;
        "Object Ref" => type
      StringV(_) =>
        [] => t;
        "String V" => type
      BoolV(_) =>
        [] => t;
        "Boolean V" => type
      otherwise =>
        [] => t;
        "Unknow V" => type
    };
    log(prefix ++ type) --> _.
  
  get-object-type(addr) --> t
  where
    read(addr) --> Obj(_,_,_,methods);
    methods-to-type(methods) --> t.
  
  methods-to-type(map) --> []
  where
    log("methods-to-type not implemented") --> _.
  
  compare-types([], []) --> true
  where
    log("type conforms because they are both empty") --> _.
  
  compare-types(_, []) --> true
  where
    log("type conforms because empty type conforms to all types") --> _.
    
  compare-types(_,_) --> false
  where
    log("type doesn't conform because its not implemented") --> _.

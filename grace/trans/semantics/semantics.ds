module semantics/trans/semantics

imports
  src-gen/ds-signatures/grace-sig
  src-gen/ds-signatures/grace-lowered-sig
  
  trans/semantics/values
  trans/semantics/store
  trans/semantics/lookup

signature
  
  arrows
    Program -init-> V
    Program --> V

    List(Statement) --> V

    Exp --> V
    Statement --> V
    Declaration --> V
    Assignment --> V
    
    Inherit --> Ref
    List(Exp) -ea-> List(V)
    
  constructors
    
    Call: M * List(V) --> V
    
    saveConst: String * V * Members --> Members
    saveConstants: List(String) * List(V) * Members --> Members

    add-member: String * List(String) * List(Statement) --> Unit
    add-members: List(String) * List(List(Statement)) --> Unit
    
    wrap-values: List(V) --> List(List(Statement))
    
    no-super: --> Ref
    
  native operators
    nativeIBinOp: String * Int * Int -> Int
    nativePrint: V -> V
    nativeEq: V * V -> Bool
    nativeMinus: V * V -> Int
    nativePlus: V * V -> Int
    nativeLte: V * V -> Bool
    
rules
  
  Expression(e) --> e.
  Declaration(e) --> e.
  Assignment(e) --> e.
  Code(v) --> v.
  
  CS(i) -s-> i.
  DS(i) -s-> i.

  NumL(s) --> NumV(parseNumber(s)).
  String(s) --> StringV(s).
  
  p@Program(_, _) -init-> v
    where
      CS CS(fresh), DS DS(fresh) |- p :: OHeap {}, MHeap {} --> v.
      
  Program(code, _) --> v
    where
      allocateObject(NoObject())--> r;
      CS CS(r), DS DS(r) |- code --> v.
  
  [] : List(Statement) --> Done().
  
  [code | [] ] : List(Statement) --> code.

  [code | codes@[_|_] ] : List(Statement) --> codes
    where code --> _.
  
  MCallRecvL(e1, "==", [e2]) --> v
    where
       e1 --> v1@NumV(_);
       e2 --> v2@NumV(_);
       case nativeEq(v1,v2) of {
         true => MCallL("true", []) --> v
         otherwise => MCallL("false", []) --> v
       }.
   
  MCallRecvL(v1@NumV(_), "-", [v2@NumV(_)]) --> NumV(nativeMinus(v1,v2)).
  MCallRecvL(v1@NumV(_), "+", [v2@NumV(_)]) --> NumV(nativePlus(v1,v2)).
        
  MCallRecvL(receiver, name, args) --> v
    where
       receiver --> ObjectRef(r);
       CS CS(r), DS DS(r) |- lookup(name) --> m;
       CS CS(r), DS DS(r) |- Call(m, args) --> v.
  
  MCallL("base_print", [v]) --> nativePrint(v).

  MCallL(name, vs) --> v
    where
      lookup(name) --> m;
      Call(m, vs) --> v.
  
  ConstantL(name, _, v) --> Done()
    where
      add-member(name, [], [Code(v)]) --> _.
  
  MethodL(name, _, params, code) --> Done()
    where
      add-member(name, params, code) --> _.
      
  ds |- ObjectL(inherit, [], code) --> ObjectRef(or)
    where
      allocateObject(Object(ds, inherit, {})) --> or;
      CS CS(or), DS DS(or) |- code --> _.

  ds |- Self() --> ObjectRef(ds).

  Call(Method([], code, scope), []) --> v
    where
      DS DS(scope) |- code --> v.

  Call(Method([n], code, scope), [a]) --> v
    where
      allocateObject(Object(scope, no-super(), {})) --> call-scope;
      DS DS(call-scope) |- add-member(n, [], [Code(a)]) --> _;
      DS DS(call-scope) |- code --> v.
      
  Call(Method([n1, n2], code, scope), [a, b]) --> v
    where
      allocateObject(Object(scope, no-super(), {})) --> call-scope;
      DS DS(call-scope) |- add-member(n1, [], [Code(a)]) --> _;
      DS DS(call-scope) |- add-member(n2, [], [Code(b)]) --> _;
      DS DS(call-scope) |- code --> v.
      
  Call(Method([n1, n2, n3], code, scope), [a, b, c]) --> v
    where
      allocateObject(Object(scope, no-super(), {})) --> call-scope;
      DS DS(call-scope) |- add-member(n1, [], [Code(a)]) --> _;
      DS DS(call-scope) |- add-member(n2, [], [Code(b)]) --> _;
      DS DS(call-scope) |- add-member(n3, [], [Code(c)]) --> _;
      DS DS(call-scope) |- code --> v.
  
  no-super() --> allocateObject(NoObject()).
  
  wrap-values([]) --> [] : List(List(Statement)).
  
//  wrap-values([v|vs]) --> [ wv | wvs ] : List(List(Statement))
//    where
//      [Wrapped(v)] : List(Statement) => wv;
//      wrap-values(vs) --> wvs.
  
  add-members([], []) --> Unit().
  
  add-members([n | ns], [code | codes]) --> Unit()
    where
      add-member(n, [], code) --> _;
      add-members(ns, codes) --> _.
  
  ds |- add-member(name, params, code) --> Unit()
    where
      allocateMethod(Method(params, code, ds)) --> mRef;
      readObject(ds) --> Object(enc, sup, tbl);
      writeObject(ds, Object(enc, sup, {name |--> mRef, tbl} )) --> _.
      
  [] : List(Exp) -ea-> [].
  
  [arg] : List(Exp) -ea-> [v]
    where
      arg --> v.
  
  [arg | more] : List(Exp) -ea-> [v | vs]
    where
      arg --> v;
      more -ea-> vs : List(V).

  Inherit(e, _, _) --> r
    where
      e --> ObjectRef(r).

  NoInherit() --> r
    where
      allocateObject(NoObject()) --> r.

module semantics/trans/semantics

imports
  src-gen/ds-signatures/grace-sig
  src-gen/ds-signatures/grace-lowered-sig
  
  trans/semantics/values
  trans/semantics/store
  trans/semantics/lookup

signature
  
  arrows
    Program -init-> V
    Program --> V

    List(Statement) --> V

    Exp --> V
    Statement --> V
    Declaration --> V
    Assignment --> V
    
    Inherit --> Ref
    
    List(Exp) -ea-> List(V)
    
  constructors
    
    call: M * List(V) --> V
    
    saveConst: String * V * Members --> Members
    saveConstants: List(String) * List(V) * Members --> Members

    addMember: String * List(String) * List(Statement) --> Unit
    addMembers: List(String) * List(List(Statement)) --> Unit
    
    createLocals: List(String) * List(List(Statement)) --> Unit
    
    wrapValues: List(V) --> List(List(Statement))
    
    noSuper: --> Ref
    
  native operators
    nativeIBinOp: String * Int * Int -> Int
    nativePrint: V -> V
    nativeEq: V * V -> Bool
    nativeMinus: V * V -> Int
    nativePlus: V * V -> Int
    nativeLte: V * V -> Bool
    
rules
  
  Expression(e) --> e.
  Declaration(e) --> e.
  Assignment(e) --> e.
  Code(v) --> v.
  
  NumL(s) --> NumV(parseNumber(s)).
  String(s) --> StringV(s).
  
  p@Program(_, _) -init-> v
    where
      C ObjectC(), S Self(fresh), Out Outer(fresh)
        |- p :: OHeap {}, MHeap {}, Locals {} --> v.
      
  Program(code, _) --> v
    where
      allocateObject(NoObject()) --> r;
      C ObjectC(), S Self(r), Out Outer(r) |- code --> v.
  
  [] : List(Statement) --> Done().
  
  [code | [] ] : List(Statement) --> code.

  [code | codes@[_|_] ] : List(Statement) --> codes
    where code --> _.
  
  /*
   * Method Calls
   */
  MCallRecvL(receiver, name, args) --> v
    where
       receiver --> ObjectRef(r);
       lookup(name) --> m;
       call(m, args) --> v.
  
  MCallL("base_print", [v]) --> nativePrint(v).

  MCallL(name, vs) --> v
    where
      debug("generic implicit call of: '", name, "'") => _;
      lookup(name) --> m;
      call(m, vs) --> v;
      debug("done generic implicit call of: '", name, "'") => _.
  
  /*
   * Constants
   */
  C MethodC() |- ConstantL(name, _, v) --> Done()
    where
      
      debug("adding local: ", name) => _;
      writeLocal(name, v) --> _.
  
  C ObjectC() |- ConstantL(name, _, v) --> Done()
    where
      debug("adding member: ", name) => _;
      addMember(name, [], [Code(v)]) --> _.
  
  ConstantL(_, _, _) --> Error()
    where
      debug("Error: unknown context for constant") => _.
  
  /*
   * Methods
   */
  C ObjectC() |- MethodL(name, _, params, code) --> Done()
    where
      addMember(name, params, code) --> _.

  C MethodC() |- MethodL(_, _, _, _) --> Error()
    where
      debug("Error: cannot create method inside a methodContext") => _.


  /*
   * Object Constructors
   */
  S Self(selfRef) |- ObjectL(NoInherit(), [], code) --> ObjectRef(newSelf)
    where
      fresh => objectnumber;
      debug("new obj constructor starting...") => _;
      allocateObject(NoObject()) --> noParent;
      allocateObject(Object(selfRef, noParent, {})) --> newSelf;
      S Self(newSelf), Out Outer(selfRef), C ObjectC() |- code --> _; // execute code under new self, current self becomes outer.
      debug("done constructing object") => _.  
   
  ObjectL(inherit, [], code) --> ObjectRef(or)
    where
      inherit --> r;
      allocateObject(Object(whodoIinheritfrom, r, {})) --> or;
      C ObjectC() |- code --> _. // scope?

  /*
   * Inherit expressions
   */
  Inherit(e, _, _) --> r
    where
      e --> ObjectRef(r).
      
  NoInherit() --> r
    where
      allocateObject(NoObject()) --> r.  

  /*
   * Self expression
   */ 
  S Self(self) |- Self() --> ObjectRef(self).

  /*
   * Outer expression
   */
  Out Outer(outer) |- Outer() --> ObjectRef(outer).

  /*
   * call (meta-function)
   */
  call(NoMethod(name), _) --> Error() // should raise exception
    where
      debug("Message not understood: ", name) => _.
  
  call(Method([], code, scope), []) :: L --> v :: L // executing a call doesnt change locals
    where
      debug("calling method with no args") => _;
      S Self(scope), C MethodC() |- code :: Locals {} --> v. // scope? // always call with empty locals

  call(Method(names@[_ | _], code, scope), args@[_ | _]) :: L --> v :: L // calling method has no net effect on locals
    where
      debug("calling method with some args") => _;
      createLocals(names, wrapValues(args)) :: Locals {} --> _ :: Locals l; // scope?
      S Self(scope), C MethodC() |- code :: Locals l --> v;
      debug("done calling methods with some args") => _.

  noSuper() --> allocateObject(NoObject()).
  
  wrapValues([]) --> [] : List(List(Statement)).
  
  wrapValues([v|vs]) --> [ wv | wvs ] : List(List(Statement))
    where
      [Code(v)] : List(Statement) => wv;
      wrapValues(vs) --> wvs.
  
  /*
   * Add members
   */
  addMembers([], []) --> Unit().
  
  addMembers([n | ns], [code | codes]) --> Unit()
    where
      addMember(n, [], code) --> _;
      addMembers(ns, codes) --> _.
  
  S Self(self) |- addMember(name, params, code) --> Unit()
    where
      debug("attempt to write member: '", name, "'") => _;
      allocateMethod(Method(params, code, self)) --> mRef;
      readObject(self) --> Object(enc, sup, tbl);
      writeObject(self, Object(enc, sup, {name |--> mRef, tbl} )) --> _;
      debug("added member: '", name, "' successfully") => _.
  
  createLocals([n|ns], [code|codes]) --> Unit()
    where
      writeLocal(n, code) --> _;
      createLocals(ns, codes) --> _.
      
  createLocals([], []) --> Unit().
  
  /*
   * Evaluate arguments
   */
  [] : List(Exp) -ea-> [].
  
  [a] : List(Exp) -ea-> [v] : List(V)
    where
      a --> v.
  
  [a | as] : List(Exp) -ea-> [v | vs]
    where
      a --> v;
      as -ea-> vs : List(V).

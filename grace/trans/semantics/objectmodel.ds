module trans/semantics/objectmodel

imports
  src-gen/ds-signatures/grace-sig

imports
  trans/semantics/values
  trans/semantics/store
  trans/semantics/runtime/natives
  
  trans/semantics/strings
  trans/semantics/numbers
  trans/semantics/lineups
  trans/semantics/statements
  trans/semantics/imports
  trans/semantics/visibility
  
signature
  sorts
    Addr

  sorts
    Object
    Member
    
  sort aliases
    Self = Addr
    HeapData = Object
    Slots = Map(Int, V)
    Methods = Map(String, V)

  constructors // extra instructions
    SlotRead : Int -> Statement
    SlotWrite : Int * Exp -> Statement 

  constructors
    Obj: Addr * List(Addr) * Slots * Methods -> Object
    RefV: Addr -> V {implicit}
  
  components
    S : Addr
    O : Addr
    
rules

  S, P Exec() |- ObjectL(inherit, uses, code) --> S'
  where
    new-object(S) --> S';
    snapshot-locals() --> L;
    S S', O S, P Flatten() |- inherit --> oc-inherit;
    S S', O S, P Flatten() |- uses --> ocs-use;
    ObjC(S, src-base(), L, code, oc-inherit, ocs-use, [], []) => oc;
    read(S') --> Obj(outer, _, slots, methods);
    update(S', Obj(outer, objc-gather-scopes(oc), slots, methods)) --> _;
    S' |- install-members-top(oc) --> oc';
    S' |- init-object(oc') --> U().

  SlotRead(i) --> ensure-defined(read-slot(i)).
  
  SlotWrite(i, e) --> DoneV()
  where
    log("trying to write " ++ str(e) ++ " to slot " ++ int2string(i)) --> _;
    e --> v;
    write-slot(i, v) --> _;
    log("wrote " ++ str(v) ++ " to slot " ++ int2string(i)) --> _.
    





/* ========== OBJECT FLATTENING =========== */
signature
  sorts
    Phase
  
  constructors
    Exec    : Phase
    Flatten : Phase
    
  sort aliases
    Source = Int
  
  components
    P : Phase
    Src : Int
    
  constructors
    ObjC: Addr * Source * Env * Code * V * List(V) * List(Alias) * List(Exclude) -> V
    NoObjC: V
    
  arrows
    Inherit --> V
    List(Use) --> List(V)

  arrows
    objc-rec-aliases(V, List(Alias)) --> V
    objc-rec-excludes(V, List(Exclude)) --> V
    objc-gather-scopes(V) --> List(Addr)
    objc-gather-scopes-concat(List(V)) --> List(Addr)
    
    src-base() --> Source
    src-next() --> Source
    src-previous() --> Source
    src-is-base(Source) --> Bool
    
rules

  S, P Flatten(), Src |- ObjectL(inherit, uses, code) --> ObjC(S, Src, L, code, oc-inherit, ocs-use, [], [])
  where
    snapshot-locals() --> L;
    O S, P Flatten() |- inherit --> oc-inherit;
    O S, P Flatten() |- uses --> ocs-use.

  P Flatten() |- MCallRecvL(e, ID(x), es) --> v
  where
    P Exec() |- e --> recv;
    P Exec() |- es --> vs;
    P Flatten() |- call-qualified(recv, x, vs) --> v.

  NoInherit() --> NoObjC().
  
  InheritL(e, aliases, excludes) --> objc-rec-aliases(objc-rec-excludes(oc, excludes), aliases)
  where
    Src src-next() |- e --> oc@ObjC(_, _, _, _, _, _, _, _).
  
  [] : List(Use) --> [].

  [UseL(e, aliases, excludes) | uses] : List(Use) --> [oc'|ocs]
  where
    Src src-next() |- e --> oc;
    objc-rec-aliases(objc-rec-excludes(oc, excludes), aliases) --> oc';
    Src src-next() |- uses --> ocs.



  objc-gather-scopes(NoObjC()) --> [].

  objc-gather-scopes(ObjC(O, _, _, _, inherit, uses, _, _)) --> [O | scopes]
  where
    objc-gather-scopes-concat([inherit | uses]) --> scopes.

  objc-gather-scopes-concat([]) --> [].
  
  objc-gather-scopes-concat([oc | ocs]) --> ocs1 ++ ocs2 
  where
    objc-gather-scopes(oc) --> ocs1;
    objc-gather-scopes-concat(ocs) --> ocs2.

  objc-rec-excludes(ObjC(outer, src, L, code, inherit, use, aliases, _), excludes) --> ObjC(outer, src, L, code, inherit, use, aliases, excludes).
  
  objc-rec-aliases(ObjC(outer, src, L, code, inherit, use, _, excludes), aliases) --> ObjC(outer, src, L, code, inherit, use, aliases, excludes).

  src-base() --> 0.
  
  Src |- src-next() --> addI(Src, 1).
  
  Src |- src-previous() --> addI(Src, -1)
  where
    gtI(Src, 0) == true.
  
  src-is-base(Src) --> eqI(Src, 0). 



/* ========== OBJECT MEMBER INSTALLATION ===== */
signature
  sort aliases
    Aliases = List(Alias)
    Excludes = List(Exclude)
  
  arrows
    install-members-top(V) --> V
    install-members(V) --> V
    install-members-map(List(V)) --> List(V)
    
    install-code(Code)--> Code
    
    install-declaration(Declaration) --> Code
    
    install-import(Statement) --> Code
    
    install-method(Declaration) --> U
    
    install-alias(String, V) --> U
    install-aliases(String, V) --> U
    
    exclude-method(String) --> Bool
    
    ensure-unique-method(String, V) --> U
    
    install-aliases() --> U
    exclude-methods() --> U
    
  components
    Als: Aliases
    Exs: Excludes
  
rules

  install-members-top(v) --> v'
  where
    install-members(v) :: NS 0, GS {} --> v'.

  install-members(NoObjC()) --> NoObjC().
  
  install-members(ObjC(O, Src, L, code, inherit, uses, Als, Exs)) --> ObjC(O, Src, L, code', inherit', uses', Als, Exs)
  where
    install-members(inherit) --> inherit';
    install-members-map(uses) --> uses';
    O, Src |- install-code(code) :: L, Als, Exs --> code' :: L _, Als _, Exs _.
  
  install-members-map([]) --> [].
  
  install-members-map([oc | ocs]) --> [oc' | ocs']
  where
    install-members(oc) --> oc';
    install-members-map(ocs) --> ocs'.
  
  install-code([]) --> []
  where
    install-aliases() --> _;
    exclude-methods() --> _.
  
  install-code([Declaration(d) | code]) --> decl-code ++ code'
  where
    install-declaration(d) --> decl-code;
    install-code(code) --> code'.

  install-code([imp@Import(_, _, _) | code]) --> imp-code ++ code'
  where
    install-import(imp) --> imp-code;
    install-code(code) --> code'.

  install-code([e | code]) --> [e | code']
  where
    e =!=> Declaration(_);
    e =!=> Import(_, _, _);
    install-code(code) --> code'.

  install-declaration(m@MethodL(_, _, _, _, _, _, _)) --> []
  where
    install-method(m) --> _.

  install-declaration(VariableL(ID(x), _, annos, e)) --> [SlotWrite(i, e)]
  where
    add-slot(x) --> i;
    install-method(field-getter(x, i, has-anno-readable(annos))) --> _;
    install-method(field-setter(x, i, has-anno-writable(annos))) --> _.

  install-declaration(VariableL(WildCard(), _, _, e)) --> [Expression(e)].

  install-declaration(ConstantL(ID(x), _, annos, e)) --> [SlotWrite(i, e)]
  where
    add-slot(x) --> i;
    install-method(field-getter(x, i, has-anno-readable(annos))) --> _.

  install-declaration(ConstantL(WildCard(), _, _, e)) --> [Expression(e)].

  install-declaration(TypeDecl(ID(x), NoTypeArg(), annos, TypeDeclBlock(tb)))
    --> [SlotWrite(i, TypeExp(AnonType(tb)))]
  where
    log("writing type value") --> _;
    add-slot(x) --> i;
    install-method(field-getter(x, i, has-anno-public(annos))) --> _.

  install-import(Import(name, ID(x), annos)) --> []
  where
    add-slot(x) --> i;
    write-slot(i, load-import(name)) --> _;
    install-method(field-getter(x, i, has-anno-readable(annos))) --> _.
  
  install-method(m@MethodL(ID(x), _, _, _, _, _, _)) --> U()
  where
    method-closure(m) --> clos;
    install-aliases(x, clos) --> _;
    exclude-method(x) --> excluded;
    case excluded of {
      false =>
        ensure-unique-method(x, clos) --> _;
        add-method(x, clos) --> _
      otherwise =>
    }.

  install-aliases(_, _) :: Als [] --> U() :: Als [].

  install-aliases(name, clos) :: Als [a@AliasL(_, ID(x)) | Als] --> u :: Als [a | Als']
  where
    name != x;
    install-aliases(name, clos) :: Als --> u :: Als'.
  
  install-aliases(name, clos) :: Als [AliasL(ID(x'), ID(x)) | Als] --> u :: Als'
  where
    name == x;
    install-alias(x', clos) --> _;
    install-aliases(name, clos) :: Als --> u :: Als'.

  install-aliases() :: Als [] --> U() :: Als [].
  
  install-aliases() :: Als [AliasL(ID(x'), ID(x)) | Als] --> U() :: Als []
  where
    disambiguate-closure(lookup-local-method(current-self(), x), x) --> clos;
    install-alias(x', clos) --> _;
    install-aliases() :: Als --> _ :: Als _.

  install-alias(x, clos@ClosV(_, _, _, _, _, _, _, _, _, _, _)) --> U()
  where
    copy-closure(clos) --> clos';
    ensure-unique-method(x, clos') --> _;
    add-method(x, clos') --> _.

  exclude-method(_) :: Exs [] --> false :: Exs [].
  
  exclude-method(name) :: Exs [ExcludeL(ID(x)) | Exs] --> true :: Exs
  where
    name == x.
  
  exclude-method(name) :: Exs [e@ExcludeL(ID(x)) | Exs] --> excluded :: Exs [e | Exs']
  where
    name != x;
    exclude-method(name) :: Exs --> excluded :: Exs'.
    
  exclude-methods() :: Exs [] --> U() :: Exs [].
  
  exclude-methods() :: Exs [ExcludeL(ID(x)) | Exs] --> U() :: Exs []
  where
    disambiguate-closure(lookup-local-method(current-self(), x), x) --> _;
    remove-method(x) --> _;
    exclude-methods() :: Exs --> _ :: Exs _.
  
  ensure-unique-method(x, clos) --> U()
  where
    lookup-local-method(current-self(), x) --> clos';
    case clos' of {
      ClosV(_, _, _, _, _, _, _, _, _, _, _) =>
        closure-source(clos) --> src;
        closure-source(clos') --> src';
        case eqI(src, src') of {
          true =>
            halt-error("Duplicate method: ", x) --> _
          otherwise =>
        }
      otherwise =>
    }.
  
/* ============== OBJECT INIT ========== */
signature
  arrows
    init-object(V) --> U
    init-object-map(List(V)) --> U
    
rules
  
  init-object(NoObjC()) --> U().
  
  init-object(ObjC(O, _, L, code, inherit, used, _, _)) --> U()
  where
    init-object(inherit) --> _;
    init-object-map(used) --> _;
    O |- code :: L --> _.

  init-object-map([]) --> U().
  
  init-object-map([oc | ocs]) --> U()
  where
    init-object(oc) --> _;
    init-object-map(ocs) --> _.

/* ========== FIELD METHOD GENERATION ======= */
signature
  arrows
    field-getter(String, Int, Bool) --> Declaration
    field-setter(String, Int, Bool) --> Declaration

  native operators
    mksettername: String -> String

rules

  field-getter(x, i, c) -->
    MethodL(ID(x), [], visibility-annos(c), [], [], no-type(), [SlotRead(i)]).

  field-setter(x, i, c) -->
    MethodL(ID(mksettername(x)), [], visibility-annos(c), [ID("p")], [], no-type(), [SlotWrite(i, MCallL(ID("p"), [] : List(Exp)))]).

/* ======== OBJECT META-FUNCTIONS ========= */
signature
  sorts
    StatementResult
    
  constructors
    res: Statement -> StatementResult

  arrows
    new-object(Addr) --> Addr

    add-slot(String) --> Int
    
    read-slot(Int) --> V
    write-slot(Int, V) --> U
    
    add-method(String, V) --> U
    
    remove-method(String) --> U
    
    lookup-local-method(V, String) --> V
    lookup-outer-method(V, String) --> V
    
    current-self() --> V
    current-outer() --> V
    current-method-names() --> List(String)
    
    is-member(String) --> Bool
    
    outer(Addr) --> V
    self(Addr) --> V
    
  components
    NS : Int // NextSlot
    GS : Map(String, Int) // GivenSlots

rules

  S |- current-self() --> S.

  O |- current-outer() --> O.

  self(S) --> S.

  outer(S) --> O
  where
    read(S) --> Obj(O, _, _, _).

  new-object(O) --> S
  where
    allocate(Obj(O, [O], {}, {})) --> S.

  add-slot(x) :: GS --> GS[x] :: GS
  where
    GS[x?] == true.

  S |- add-slot(x) :: NS, GS --> NS :: NS addI(NS, 1), GS {x |--> NS, GS}
  where
    GS[x?] == false;
    read(S) --> Obj(O, outers, slots, methods);
    update(S, Obj(O, outers, {NS |--> UninitializedV(), slots}, methods)) --> _.

  S |- read-slot(i) --> slots[i]
  where
    read(S) --> Obj(_, _, slots, _).

  S |- write-slot(i, v) --> U()
  where
    read(S) --> Obj(O, outers, slots, methods);
    update(S, Obj(O, outers, {i |--> v, slots}, methods)) --> _.

  S |- add-method(x, v) --> U()
  where
    read(S) --> Obj(O, outers, slots, methods);
    update(S, Obj(O, outers, slots, {x |--> v, methods})) --> _.




  S |- current-method-names() --> allkeys(methods)
  where
    read(S) --> Obj(_, _, _, methods).

  S |- is-member(x) --> methods[x?]
  where
    read(S) --> Obj(_,_,_, methods).



  // Lookup in self
  lookup-local-method(RefV(S'), x) --> v
  where
    read(S') --> Obj(_, _, _, methods);
    case methods[x?] of {
      true =>
        methods[x] => v
      false =>
        DoneV() => v
    }.

  lookup-local-method(v, _) --> DoneV()
  where
    v =!=> RefV(_).

  // Lookup in outers
  lookup-outer-method(RefV(S'), x) --> v
  where
    read(S') --> Obj(O', _, _, methods);
    case methods[x?] of {
      true =>
        methods[x] => v
      false =>
        is-stored(O') --> outer-exists;
        case outer-exists of {
          true =>
            lookup-outer-method(O', x) --> v
          otherwise =>
            DoneV() => v
        }
    }.

  lookup-outer-method(v, _) --> DoneV()
  where
    v =!=> RefV(_).


signature
  arrows
     log-object-creation(Addr) --> Addr

rules

  log-object-creation(S) --> S
  where
    read(S) --> Obj(O, outers, _, methods);
    concat(separate-by(allkeys(methods), ", ")) --> method-names;
    log("S: " ++ int2string(S : Int) ++ " O " ++ int2string(O : Int) ++
      " outers: " ++ str(outers : AST) ++  ", method-names: " ++ method-names
      ++ ", methods: " ++ str(methods : AST)) --> _.
  

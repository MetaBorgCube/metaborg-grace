module trans/semantics/functions

imports
  src-gen/ds-signatures/grace-sig
  trans/semantics/values
  trans/semantics/statements
  trans/semantics/objectmodel
  trans/semantics/types
  
signature
  sorts
    Addr

  constructors
    ClosV: Addr * Addr * List(Identifier) * Code * Env -> V

  arrows
    method-closure(Declaration) --> V
    
    resolve-call(V, String, List(V)) --> V
    call(V, V, List(V)) --> V
    
    call(V, List(V)) --> V
    
    read-local(String) --> V
    bind-local(Identifier, V) --> U
    bind-locals(List(Identifier), List(V)) --> U
    
    alloc-locals(Code) --> U
    
  sort aliases
    Env = Map(String, V)
  
  components
    L : Env
    
  native operators
    nativePrint: V -> V

rules

  MCallL(ID("print(_)"), [e]) --> nativePrint(v)
  where
    e --> v.

  MCallL(ID(x), [e]) --> DoneV()
  where
    ":=(_)" => bind_suffix;
    str-ends-with(x, bind_suffix) --> true;
    e --> v;
    bind-local(ID(str-rm-suffix(x, bind_suffix)), v) --> _.

  MCallL(ID(x), []) --> read-local(x).
  
  P Exec() |- MCallRecvL(e, ID(x), es) --> resolve-call(v, x, vs)
  where
    e --> v;
    es --> vs.
  
  MQCallOuter(e) --> outer(S)
  where
    e --> RefV(S).

  BlockL(params, _, code) --> method-closure(MethodL(ID("lambda"), [], NoAnnotations(), params, no-type(), code)).
  
rules /* closure construction */

  method-closure(MethodL(_, _, _, params, _, code)) :: L --> ClosV(S, O, params, code, L') :: L
  where
    current-self() --> S;
    current-outer() --> O;
    alloc-locals(code) :: L --> _ :: L L'.

rules /* method resulution and dispatch */
  
  resolve-call(clos@ClosV(_, _, _, _, _), x, vs) --> call(clos, vs)
  where
    str-starts-with(x, "apply") == true.
  
  resolve-call(recv, x, vs) --> call(clos, vs)
  where
    recv =!=> ClosV(_, _, _, _, _);
    lookup-method(recv, x) --> clos.

  call(ClosV(S, O, params, code, env), vs) --> v
  where
    bind-locals(params, vs) :: L env --> _ :: L;
    S, O |- code :: L --> v :: L _. 
  

rules /* local environment operations */
  
  alloc-locals([]) --> U().
  
  alloc-locals([Declaration(VariableL(id, _, _, _)) | xs]) --> alloc-locals(xs)
  where
    bind-local(id, UninitializedV()) --> _.
  
  alloc-locals([Declaration(ConstantL(id, _, _, _)) | xs]) --> alloc-locals(xs)
  where
    bind-local(id, UninitializedV()) --> _.

  alloc-locals([_ | xs]) --> alloc-locals(xs).
  
  read-local(x) :: L --> L[x] :: L.
  
  bind-local(ID(x), v) :: L --> U() :: L {x |--> v, L}.
  
  bind-local(WildCard(), _) :: L --> U() :: L.
  
  bind-locals([], []) --> U().
  
  bind-locals([x | xs], [v | vs]) --> bind-locals(xs, vs)
  where
    bind-local(x, v) --> _.

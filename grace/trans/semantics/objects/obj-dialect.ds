module trans/semantics/objects/obj-dialect

imports
  semantics/signatures
  trans/semantics/objects/obj-repr
  trans/semantics/runtime/context
  trans/semantics/semantics
  
signature
  components
    Dialects: Map(String, Loc)
  
  arrows
    load-dialect(String) --> Loc

    desugar-program-dialect(Program) --> (Statement * Program)
    desugar-rootobj-dialect(Exp) --> (Statement * Exp)
    dialect-path(String) --> String
    
rules
  
  desugar-program-dialect(Program([Expression(obj)])) --> (dialect, Program([Expression(obj')]))
  where
    desugar-rootobj-dialect(obj) --> (dialect, obj')
  
  desugar-rootobj-dialect(ObjectLS(inherit, uses, slots, [dialect@Dialect(_) | codexs])) --> (dialect, ObjectLS(inherit, uses, slots, codexs))
  
  desugar-rootobj-dialect(ObjectLS(inherit, uses, slots, code@[s | _])) --> (Dialect("standardGrace"), ObjectLS(inherit, uses, slots, code))
  where
    s =!=> Dialect(_)
  
  desugar-rootobj-dialect(ObjectLS(inherit, uses, slots, code@[])) --> (Dialect("standardGrace"), ObjectLS(inherit, uses, slots, code))
  
  ProgPath |- dialect-path(name) --> native-parent-directory(ProgPath) ++ "/" ++ name
  where
    name != "standardGrace"
  
  dialect-path("standardGrace") --> native-standardgrace()
  
rules
  
  S |- load-dialect("none") --> S
  
  load-dialect(dialect) :: Dialects --> Dialects[dialect] :: Dialects
  where
    dialect != "none";
    Dialects[dialect?] == true
  
  load-dialect(dialect) :: Dialects --> dia-addr :: Dialects'
  where
    dialect != "none";
    Dialects[dialect?] == false;
    parse-program(dialect-path(dialect)) --> dia-prog;
    dia-prog --> RefV(dia-addr);
    read(dia-addr) --> Obj(_, outers, attrs);
    update(dia-addr, Obj(fresh, outers, attrs)) --> _;
    { dialect |--> dia-addr, Dialects} => Dialects'
    
signature
  constructors
    ReadImport: String -> Exp
  
  arrows
    import-path(String) --> String

  components
    Imports: Map(String, Loc)

rules
  
  ReadImport(import) :: Imports --> RefV(Imports[import]) :: Imports
  where
    Imports[import?] == true
  
  ReadImport(import) :: Imports --> RefV(import-addr) :: Imports'
  where
    Imports[import?] == false;
    parse-program(import-path(import)) --> import-prog;
    import-prog --> RefV(import-addr);
    {import |--> import-addr, Imports} => Imports'

  ProgPath |- import-path(name) --> native-parent-directory(ProgPath) ++ "/" ++ name
    



  
  
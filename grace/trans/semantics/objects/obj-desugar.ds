module trans/semantics/objects/obj-desugar

imports
  semantics/signatures
  trans/semantics/objects/obj-root
  trans/semantics/objects/obj-slots
  trans/semantics/objects/obj-dialect
  trans/semantics/runtime/natives
  trans/semantics/types

signature
  sorts
    LInherit
  
  sort aliases
    LAliases = Map(Identifier, Identifier)
    LExcludes = Map(Identifier, Identifier)
    LSlots = List(Identifier)
    LMethods = List((Identifier * Declaration))
    
  constructors
    LObj: List(LInherit) * LSlots * LMethods -> Exp
    LInherit: Exp * LAliases * LExcludes -> LInherit
    
  sort aliases
    Code = List(Statement)
    
  arrows
  
    desugar-obj(Exp) --> Exp
    desugar-inherit(Inherit) --> LInherit
    desugar-uses(List(Use)) --> List(LInherit)
    desugar-use(Use) --> LInherit
    collect-methods(Code) --> LMethods
    
    alias-map(List(Alias)) --> LAliases
    exclude-map(List(Exclude)) --> LExcludes
    
rules

  desugar-obj(RObjectL(code)) --> LObj([], [], methods)
  where
    collect-methods(code) --> methods

  desugar-obj(ObjectLS(inherit, uses, slots, code)) --> LObj([inherit'|uses'], slots, methods)
  where
    desugar-inherit(inherit) --> inherit';
    desugar-uses(uses) --> uses';
    collect-methods(code) --> methods

  desugar-inherit(InheritL(e, als, exs)) --> LInherit(e, alsmap, exsmap)
  where
    alias-map(als) --> alsmap;
    exclude-map(exs) --> exsmap
  
  desugar-inherit(NoInherit()) --> LInherit(desugar-obj(rootobj-code()), {}, {})
  
  desugar-use(UseL(e, als, exs)) --> desugar-inherit(InheritL(e, als, exs))
  
  desugar-uses([]) --> []
  
  desugar-uses([use | uses]) --> [use' | uses']
  where
    desugar-use(use) --> use';
    desugar-uses(uses) --> uses'
  
  alias-map([]) --> {}
  
  alias-map([AliasL(x', x) | xs]) --> {x' |--> x, xs-map}
  where
    alias-map(xs) --> xs-map
  
  exclude-map([]) --> {}
  
  exclude-map([ExcludeL(x) | xs]) --> {x |--> x, xs-map}
  where
    exclude-map(xs) --> xs-map

  collect-methods([]) --> []
  
  collect-methods([Declaration(m@MethodLS(x, _, _, _, _, _, _, _)) | ms]) --> [(x, m) | ms']
  where
    collect-methods(ms) --> ms'
  
  collect-methods([s | ms]) --> collect-methods(ms)
  where
    s =!=> Declaration(_)

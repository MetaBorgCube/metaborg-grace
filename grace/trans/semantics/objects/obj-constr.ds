module trans/semantics/objects/obj-constr

imports
  trans/semantics/objects/obj-desugar
  trans/semantics/objects/obj-repr
  trans/semantics/objects/obj-init
  trans/semantics/store
  trans/semantics/functions/func-locals-policy
  
signature
  sorts
    EvalMode
  
  constructors
    // regular evaluation mode
    E: EvalMode
    // object building mode. carries the address of the object being constructed
    B: Addr -> EvalMode
  
  components
    EB : EvalMode
  
  arrows
    construct-obj(Exp) --> Addr
    install-parents(Addr, List(LInherit)) --> U
    install-parent(Addr, LInherit) --> U
    install-slots(Addr, LSlots) --> U
    install-methods(Addr, LMethods) --> U
    install-methods-aux(Addr, List(String), LMethods) --> U
    
rules

  Self() --> RefV(self-addr())
  
  Outer() --> RefV(outer-addr())

  MQCallOuter(e) --> RefV(outer-addr(S))
  where
    e --> RefV(S)

  o@ObjectL(_, _, _) --> desugar-obj(o)
  
  S, EB |- o@LObj(_, _, _) --> RefV(S')
  where
    construct-obj(o) --> S';
    enforce-closure-policy(S') --> _;
    case EB of {
      E() =>
        S S', O S |- init-obj(S') --> _
      otherwise =>
    }
  
  S, EB |- construct-obj(LObj(parents, slots, methods)) --> S'
  where
    allocate(Obj(S, [], {}, {})) --> S';
    case EB of {
      B(S-init) =>
      otherwise =>
        S' => S-init
    };
    S S-init, O S |- install-parents(S', parents) --> _;
    S S-init, O S |- install-slots(S', slots) --> _;
    S S-init, O S |- install-methods(S', methods) --> _

  install-parents(S', []) --> U()
  
  install-parents(S', [p | parents]) --> U()
  where
    install-parent(S', p) --> _;
    install-parents(S', parents) --> _
  
  S |- install-parent(S', LInherit(e, alias-map, exclude-map)) --> U()
  where
    EB B(S) |- e --> RefV(S);
    read(S') --> Obj(O, parents, slots, methods);
    update(S', Obj(O, [(S, alias-map, exclude-map) | parents], slots, methods)) --> _
  
  EB B(S) |- MCallRecvL(e, ID(x), es) --> v
  where
    EB E() |- e --> recv;
    EB E() |- es --> vs;
    EB B(S) |- call-qualified(recv, x, vs) --> v
  
  install-slots(_, []) --> U()
  
  install-slots(S', [s | ss]) --> U()
  where
    default-value() --> v;
    read(S') --> Obj(O, parents, slots, methods);
    update(S', Obj(O, parents, {s |--> v, slots}, methods)) --> _;
    install-slots(S', ss) --> _
  
  install-methods(_, []) --> U()
  
  install-methods(S', [ (m, decl) | ms]) --> install-methods(S', ms)
  where
    enforce-member-policy(S', m) --> _;
    method-closure(decl) --> clos;
    read(S') --> Obj(O, parents, slots, methods);
    update(S', Obj(O, parents, slots, {m |--> clos, methods})) --> _
  


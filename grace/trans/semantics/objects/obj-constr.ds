module trans/semantics/objects/obj-constr

imports
  trans/semantics/objects/obj-desugar
  trans/semantics/objects/obj-repr
  trans/semantics/objects/obj-init
  trans/semantics/store
  
signature
  sorts
    EvalMode
  
  constructors
    // regular evaluation mode
    E: EvalMode
    // object building mode. carries the address of the object being constructed
    B: Addr -> EvalMode
  
  components
    EB : EvalMode
  
  arrows
    construct-obj(Exp) --> Addr
    install-parents(List(LInherit)) --> Parents
    install-parent(LInherit) --> Parent
    install-slots(LSlots) --> Slots
    install-methods(LMethods) --> Methods
    install-methods-aux(List(String), LMethods) --> Methods
    
rules

  Self() --> RefV(self()).
  
  Outer() --> RefV(outer()).

  o@ObjectL(_, _, _) --> desugar-obj(o).
  
  S, EB |- o@LObj(_, _, _) --> RefV(S')
  where
    construct-obj(o) --> S';
    case EB of {
      E() =>
        S S', O S |- init-obj(S') --> _
      otherwise =>
    }.  
  
  S, EB |- construct-obj(LObj(parents, slots, methods)) --> S'
  where
    allocate(Obj(S, [], {}, {})) --> S';
    case EB of {
      B(S-init) =>
      otherwise =>
        S' => S-init
    };
    S S-init, O S |- install-parents(parents) --> parent-links;
    S S-init, O S |- install-slots(slots) --> slots-table;
    S S-init, O S |- install-methods(methods) --> methods-table;
        log("Constructed: " ++ int2string(S') ++ " methods=" ++ str(allkeys(methods) : AST)) --> _;
    update(S', Obj(S, `parent-links, slots-table, methods-table)) --> _.

  install-parents([]) --> [].
  
  install-parents([p | parents]) --> [p' | parents']
  where
    install-parent(p) --> p';
    install-parents(parents) --> parents'.
  
  S |- install-parent(LInherit(e, alias-map, exclude-map)) --> (S, alias-map, exclude-map)
  where
    EB B(S) |- e --> RefV(S).
  
  EB B(S) |- MCallRecvL(e, ID(x), es) --> v
  where
    EB E() |- e --> recv;
    EB E() |- es --> vs;
    EB B(S) |- call-qualified(recv, x, vs) --> v.
  
  install-slots([]) --> {}.
  
  install-slots([s | ss]) --> { s |--> UninitializedV(), slots}
  where
    install-slots(ss) --> slots.
  
  install-methods(methods) --> install-methods-aux(method-names, methods)
  where
    allkeys(methods) => method-names.
  
  install-methods-aux([], _) --> {}.
  
  install-methods-aux([m | ms], methods) --> {m |--> clos, methods-map}
  where
    method-closure(methods[m]) --> clos;
    install-methods-aux(ms, methods) --> methods-map.


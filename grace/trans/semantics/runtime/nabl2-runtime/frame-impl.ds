module semantics/runtime/nabl2-runtime/frame-impl

imports
  semantics/runtime/nabl2-runtime/frame-api
  semantics/runtime/nabl2-runtime/util

// FIXME: All named arrows should be meta-functions, once we get better support for overloaded default arrows.

signature

  constructors
    Addr : Frame * Occurrence -> Addr

  sorts FrameContainer constructors
    FC_ : Scope * Map(Label, Map(Scope, Frame)) * Map(Occurrence, Val) -> Frame 
    
  constructors
    F_ : Int -> Frame // {implicit}
    H_ : Map(Frame, Frame) -> Heap // {implicit}

  arrows
    getScopeOfFirstElem(Path) --> Scope

//////////////////////////////
// VANILLA FRAMES AND HEAPS //
//////////////////////////////

rules

  // Operations on heap
  
  initHeap(_) --> H_({})

  // Operations on frames

  initFrame(s, ks, slots) :: H H_(x) --> ff :: H H_({ ff |--> FC_(s, ks, slots), x })
  where
    F_(fresh) => ff
 
  H H_(x) |- scopeOf(f) --> s
  where
    x[f] => FC_(s, _, _)
  
  // Dynamic address lookup  
  F f |- lookup([D(_, d)]) --> Addr(f, d)

  H h, F f1 |- lookup([E(s, l)|p]) --> Addr(f3, d)
  where
    getScopeOfFirstElem(p) --> s';
    H h |- linksOf(f1) --> ks;
    ks[l][s'] => f2;
    H h, F f2 |- lookup(p) --> Addr(f3, d)
 
 getScopeOfFirstElem([D(s, _)|_]) --> s
 getScopeOfFirstElem([E(s, _)|_]) --> s
 getScopeOfFirstElem([N(s, _, _, _)|_]) --> s

 
  // Fetching and mutating slot values
    
  H h |- get(Addr(f', d)) --> v
  where
    H h |- slotsOf(f') --> slots;
    slots[d] => v

  set(Addr(f, d), v) :: H H_(x) --> v :: H H_({f |--> FC_(s, ks, {d |--> v, slots}), x})
  where
    x[f] => FC_(s, ks, slots)
  
  mkAddr(f, d) --> Addr(f, d)

rules
  
  H H_(x) |- linksOf(f) --> ks
  where
    x[f] => FC_(_, ks, _)
    
  H H_(x) |- slotsOf(f) --> slots
  where
    x[f] => FC_(_, _, slots)

//////////////////////////////
// DEFAULT FRAMES AND HEAPS //
//////////////////////////////

signature // Utility function
  
  arrows
    initDefaultSlots(Scope, List(Namespace)) --> Map(Occurrence, Val)
    DefaultSlots(List(Occurrence)) --> Map(Occurrence, Val)

rules // Utility function

  initDefaultSlots(_, []) --> {}
  
  initDefaultSlots(s, [ns|namespaces]) --> slots + tail
  where
    declsOf(s, ns) --> ds;
    DefaultSlots(ds) --> slots;
    initDefaultSlots(s, namespaces) --> tail

  DefaultSlots([]) --> {}

  DefaultSlots([d|ds]) --> { d |--> v, slots }
  where
    typeOf(d) --> t;
    default(t) --> v;
    DefaultSlots(ds) --> slots

rules // initDefault

  initDefault(s, ks) --> initDefaultNS(s, ks, [DefaultNamespace()])

  initDefaultNS(s, ks, namespaces) :: H H_(x) -->
    ff :: H H_({ ff |--> FC_(s, ks, initDefaultSlots(s, namespaces)), x })
  where
    F_(fresh) => ff

signature // initEager helpers
  
  arrows
    initEagerEdges(Map(Label, List(Scope)), List(Label), List(Namespace)) :: H -->
      Map(Label, Map(Scope, Frame)) :: H
    initEagerEdge(List(Scope), List(Namespace)) :: H --> Map(Scope, Frame) :: H

rules // initEager takes a scope and recursively traverses its edges to construct frame links

  initEager(s, namespaces) --> initDefaultNS(s, links, namespaces)
  where
    edgesOf(s) --> es;
    allkeys(es) => ls;
    initEagerEdges(es, ls, namespaces) --> links
    
  initEagerEdges(_, [], _) --> {}
  
  initEagerEdges(m, [l|ls], ns) -->
    { l |--> link, tail }
  where
    initEagerEdge(m[l], ns) --> link;
    initEagerEdges(m, ls, ns) --> tail

  initEagerEdge([], _) --> {}
  
  initEagerEdge([s|ss], ns) --> { s |--> F, link }
  where
    initEager(s, ns) --> F;
    initEagerEdge(ss, ns) --> link

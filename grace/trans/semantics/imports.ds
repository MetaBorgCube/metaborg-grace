module trans/semantics/imports

imports
  src-gen/ds-signatures/grace-sig
  src-gen/ds-signatures/grace-lowered-sig
  trans/semantics/semantics
  trans/semantics/statements
  
signature
  sort aliases
    Addr = Int
    
  components
    DCache : Map(String, Addr)
    ICache : Map(String, V)
  
  arrows
    collect-dialect-statement(Program) --> Statement
    load-dialect(Statement) --> Addr
    
    load-import(String) --> V
    
    parse-file(String) --> Program
    
    dialect-cache-has(String) --> Bool
    dialect-cache-add(String, Addr) --> Addr
    dialect-cache-get(String) --> Addr
    dialect-path(String) --> String
    
    import-cache-has(String) --> Bool
    import-cache-add(String, V) --> V
    import-cache-get(String) --> V
    import-path(String) --> String
    
  native operators
    native-parse-file: String -> Program
    native-term-origin-path: AST -> String
    native-parent-directory: String -> String
    native-standardgrace: String
    
  components
    ProgPath: String
    
rules
  
  parse-file(s) --> native-parse-file(s)
  
  S |- load-dialect(Dialect("none")) --> S
  
  load-dialect(Dialect(name)) --> dialect-cache-get(name)
  where
    dialect-cache-has(name) --> true

  load-dialect(Dialect(name)) --> dialect-cache-add(name, dialect)
  where
    dialect-cache-has(name) --> false;
    parse-file(dialect-path(name)) --> program;
    program --> RefV(dialect);
    read(dialect) --> Obj(_, outers, slots, methods);
    update(dialect, Obj(fresh, outers, slots, methods)) --> _

  collect-dialect-statement(Program([Expression(ObjectL(_,_,[dialect@Dialect(_) | _ ])) | _])) --> dialect
  
  collect-dialect-statement(Program([Expression(ObjectL(_,_,[stm | _ ])) | _])) --> Dialect("standardGrace")
  where
    stm =!=> Dialect(_)
  
  
  load-import(name) --> import-cache-get(name)
  where
    import-cache-has(name) --> true
  
  load-import(name) --> import-cache-add(name, import)
  where
    import-cache-has(name) --> false;
    parse-file(import-path(name)) --> program@Program(_);
    program --> import@RefV(_)

  
  ProgPath |- import-path(name) --> native-parent-directory(ProgPath) ++ "/" ++ name
  
  ProgPath |- dialect-path(name) --> native-parent-directory(ProgPath) ++ "/" ++ name
  where
    name != "standardGrace"
  
  dialect-path("standardGrace") --> native-standardgrace() 


  DCache |- dialect-cache-has(name) --> DCache[name?]
  
  dialect-cache-add(name, dialect) :: DCache --> dialect :: DCache { name |--> dialect, DCache}
  
  dialect-cache-get(name) :: DCache --> DCache[name] :: DCache
  
  
  ICache |- import-cache-has(name) --> ICache[name?]
  
  import-cache-add(name, import) :: ICache --> import :: ICache {name |--> import, ICache}
  
  import-cache-get(name) :: ICache --> ICache[name] :: ICache
  
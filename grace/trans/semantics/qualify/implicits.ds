module trans/semantics/qualify/implicits

imports
  src-gen/ds-signatures/grace-lowered-sig
  src-gen/ds-signatures/grace-sig

imports
  trans/semantics/runtime/natives
  trans/semantics/qualify/qualify
  trans/semantics/qualify/generate

signature
  arrows
//    make-qualified-call(Exp, Level, Level) --> AST
    
rules

  MCallL(id@ID("print(_)"), [e]) -q-> MCallL(id, [e']) : Exp
    where
      e -q-> e'.
  MCallL(id@ID("while(_)do(_)"), es) -q-> MCallL(id, es') : Exp
    where
      es -q-> es'.

  MCallL(ID(n), args) -q-> MCallRecvL(recv, ID(n), args) : Exp
    where
      ":=(_)" => bind_suffix;
      str-ends-with(n, bind_suffix) --> true;
      MCallL(ID(str-rm-suffix(n, bind_suffix)), args) -q-> m'@MCallRecvL(recv, _, args);
      log("implicit setter: '" ++ n ++ "' " ++ str(m')) --> _.

  QOL |- MCallL(id@ID(n), es) :: QOM, QLM -q-> m : Exp
    where
      QOM[n?] == true;
      QLM[n?] == false;
      log("implicit: '" ++ n ++ "'.") --> _;
      log("found: '" ++ n ++ "' in object, level: " ++ int2string(QOM[n]) ++ " own level: " ++ int2string(QOL)) --> _;
      es -q-> es';
      make-qualified-call(MCallL(id, es'), QOL, QOM[n]) --> m;
      log("done handling object implicit: '" ++ n ++ "' gen: " ++ str(m)) --> _.
  
  QOL |- m@MCallL(id@ID(n), es) :: QOM, QLM -q-> m : Exp
    where
      QOM[n?] == false;
      QLM[n?] == true;
      log("implicit: '" ++ n ++ "'.") --> _;
      log("found: '" ++ n ++ "' in local, level: " ++ int2string(QOL)) --> _;
      es -q-> es';
      MCallL(id, es') => m;
      log("done handling local implicit: '" ++ n ++ "' gen: " ++ str(m)) --> _.

  m@MCallL(ID(n), _) :: QOM, QLM -q-> m : Exp
    where
      QOM[n?] == true;
      QLM[n?] == true;
      log("implicit: '" ++ n ++ "'.") --> _;
      log("Declared as both local and field: " ++ n) --> _.
  
  MCallL(id@ID(n), es) :: QOM, QLM -q-> m'
    where
      QOM[n?] == false;
      QLM[n?] == false;
      log("implicit: '" ++ n ++ "'.") --> _;
      log("Cannot qualify method: " ++ n) --> _;
      es -q-> es';
      MCallL(id, es') => m';
      log("done handling implicit: " ++ n ++ " gen: " ++ str(m')) --> _.
module trans/semantics/object/resolution

imports
  src-gen/ds-signatures/grace-sig

imports
  trans/semantics/values
  trans/semantics/store
  trans/semantics/object/object

signature
  sorts
    PathPart
  
  sort aliases
    Path = List(PathPart) // invariant: never empty unless not found
  
  constructors
    PL: PathPart
    PP: Int -> PathPart
    PO: PathPart
  
  arrows
    deref(Addr) --> Object
    
    resolve(String, Self) --> Path
    
    resolve-in-parent(String, Parent) --> Path
    resolve-in-outer(String, Self) --> Path
    
    
    resolve-in-parents-helper(String, Self) --> Path
    resolve-in-parents(String, Parents) --> Path
    
    disambiguate-paths(Path, Path) --> Path
    
rules

  resolve(x, S') --> [PL()]
  where
    deref(S') --> Obj(_, _, _, methods);
    methods[x?] == true.
  
  S |- resolve(x, S') --> path
  where
    S == S'; // lookup from self
    deref(S') --> Obj(_, _, _, methods);
    methods[x?] == false;
    resolve-in-parents-helper(x, S') --> parent-path; // list of pathparts [] [_|_]
    resolve-in-outer(x, S') --> outer-path;
    disambiguate-paths(parent-path, outer-path) --> path.

  S |- resolve(x, S') --> resolve-in-parents-helper(x, S')
  where
    S != S'; // lookup from outside
    deref(S') --> Obj(_, _, _, methods);
    methods[x?] == false.
  
  resolve-in-outer(x, S) --> path
  where
    deref(S) --> Obj(O, _, _, _);
    deref(O) --> Obj(O', _, _, _);
    S O, O O' |- resolve(x, O) --> path.
    
  resolve-in-parents-helper(x, S) --> resolve-in-parents(x, parents)
  where
    deref(S) --> Obj(_, parents, _, _).
 
  resolve-in-parents(_, []) --> [].
  
  resolve-in-parents(x, [parent | parents]) --> path
  where
    resolve-in-parent(x, parent) --> p;
    case p of {
      [_|_] =>
        p => path
      [] =>
        resolve-in-parents(x, parents) --> path
    }.
  
  resolve-in-parent(x, (S, aliases, excludes)) --> path
  where
    path as resolve(aliases[x], S) : Path if aliases[x?]
         or [] if excludes[x?]
         or resolve(x, S).

  disambiguate-paths(p@[_|_], []) --> p. // parent
  
  disambiguate-paths([], o@[_|_]) --> o. // outer
  
  disambiguate-paths([_|_], [_|_]) --> []. // ambiguous
  
  disambiguate-paths([], []) --> []. // not found
    

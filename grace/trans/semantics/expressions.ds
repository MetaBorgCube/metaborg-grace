module trans/semantics/expressions

imports
  src-gen/ds-signatures/grace-sig
  trans/semantics/values
  trans/semantics/statements
  trans/semantics/objectmodel
  
signature
  arrows
    Exp --> V
    List(Exp) --> List(V)
    
    resolve-call(V, String, List(V)) --> V
    
    call(V, V, List(V)) --> V
    
  native operators
    nativePrint: V -> V

rules

  Self() --> current-self().
  
  Outer() --> current-outer().

  MCallL("print", [e]) --> nativePrint(v)
  where
    e --> v.
  
  MCallL(x, es) --> MCallRecvL(Self(), x, es).
  
  MCallRecvL(e, x, es) --> resolve-call(v, x, vs)
  where
    e --> v;
    es --> vs.
  
  [] : List(Exp) --> [].
  
  [e | es] : List(Exp) --> [ v | vs ]
  where
    e --> v;
    es --> vs.

rules
  
  resolve-call(recv@RefV(addr), x, vs) --> v
  where
    lookup-method(recv, x) --> mv;
      nativePrint(StringV("Calling function name:")) => _;
      nativePrint(StringV(x)) => _;
    call(recv, mv, vs) --> v.
  
  // field access
  call(_, mv, []) --> mv
  where
    mv =!=> ClosV(_, _, _, _).

  // method call with no arguments
  call(S, ClosV([], code, _, O), []) --> v
  where
      nativePrint(StringV("Exec closure:")) => _;
      nativePrint(NumV(S:Int)) => _;
      nativePrint(NumV(O:Int)) => _;
    S, O |- code --> v.
  
  call(S, ClosV(_, code, _, O), [_|_]) --> DoneV()
  where
    halt-error("You haven't told me how to call functions with arguments", "") --> _.
    
     

    

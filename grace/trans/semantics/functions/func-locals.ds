module trans/semantics/functions/func-locals

imports
  semantics/signatures
  trans/semantics/values
  

signature
  sort aliases
    Env = Map(Identifier, VAddr)
    
  components
    VH: VHeap
    E : Env

  arrows
    bind-locals(List(Identifier)) --> U
    bind-locals(List(Identifier), List(V)) --> U

    bind-local(Identifier, V) --> U
    
    default-values(List(Identifier)) --> List(V)

    is-local(Identifier) --> Bool
    read-local(Identifier) --> V
    write-local(Identifier, V) --> U
    
rules

  bind-locals(ids) --> bind-locals(ids, default-values(ids))
  
  bind-locals([], []) --> U()
  
  bind-locals([WildCard() | ids], [_ | vs]) --> bind-locals(ids, vs)
  
  bind-locals([x@ID(_) | ids], [v | vs]) --> bind-locals(ids, vs)
  where
    bind-local(x, v) --> U()

  bind-local(x, v) :: E --> U() :: E {x |--> vaddr, E}
  where
    v-allocate(v) --> vaddr

  default-values([]) --> []
  
  default-values([_ | ids]) --> [ v | vs]
  where
    default-value() --> v;
    default-values(ids) --> vs
  
  is-local(x) :: E --> E[lx?] :: E
  where
    ":=(_)" => bind_suffix;
    name(x) --> name;
    case str-ends-with(name, bind_suffix) : Bool of {
      true =>
        mk-identifier(str-rm-suffix(name, bind_suffix)) --> lx
      otherwise =>
        x => lx
        
    }

  read-local(x) :: E --> v-read(E[x]) :: E
  
  write-local(x, v) :: E --> U() :: E
  where
    v-update(E[x], v) --> _

  
signature
  sort aliases
    VAddr = Int
    VHeap = Map(VAddr, V)
  
  components
    VH : VHeap
  
  arrows
    v-allocate(V) --> VAddr
    v-update(VAddr, V) --> VAddr
    v-read(VAddr) --> V
    v-next() --> VAddr
    
rules

  v-allocate(v) :: VH --> addr :: VH {addr |--> v, VH}
  where
    v-next() --> addr

  v-read(addr) :: VH --> VH[addr] :: VH

  v-update(addr, v) :: VH --> addr :: VH {addr |--> v, VH}

  v-next() --> fresh
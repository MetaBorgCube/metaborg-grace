module trans/semantics/functions/calls

imports
  src-gen/ds-signatures/grace-sig
  trans/semantics/statements
  trans/semantics/functions/locals
  
signature
  sorts
    Return-Marker
  
  constructors
    //     self   outer  params                                body   env   public source   return          paramtypes ret-type
    ClosV: Addr * Addr * List(Identifier) * List(Identifier) * Code * Env * Bool * Source * Return-Marker * List(TypeExp) * TypeExp -> V
    
    No-Return: Return-Marker
    Return-To: Int -> Return-Marker
    
    Rex: Int * V -> Exn

  components
    R: Return-Marker

/* =========== call resolution and dispatch =========== */
signature
  arrows
    call-implicit(String, List(V)) --> V
    call-qualified(V, String, List(V)) --> V
    call(V, List(V), String) --> V
    
    access-local(String, List(V)) --> V
    
    disambiguate-closure(V, String) --> V
    disambiguate-closure(V, V, String) --> V

    closure-source(V) --> Source
    
rules
  
  call-implicit(x, vs) --> access-local(x, vs)
  where
    is-local(x) --> true.
  
  call-implicit(x, vs) --> call(clos, vs, x)
  where
    is-local(x) --> false;
    lookup-local-method(current-self(), x) --> local-clos;
    lookup-outer-method(current-outer(), x) --> outer-clos;
    disambiguate-closure(local-clos, outer-clos, x) --> clos.

  access-local(x, [v]) --> DoneV()
  where
    str-ends-with(x, ":=(_)") --> true;
    update-local(ID(str-rm-suffix(x, ":=(_)")), v) --> _.
  
  access-local(x, []) --> read-local(x).

  call-qualified(clos@ClosV(_, _, _, _, _, _, _, _, _, _, _), x, vs) --> call(clos, vs, x)
  where
    str-starts-with(x, "apply") == true.
    
  call-qualified(recv, x, vs) --> call(clos, vs, x)
  where
    lookup-local-method(recv, x) --> clos;
    disambiguate-closure(clos, x) --> _.

  call(clos@ClosV(S, O, params, locals, code, L1, _, _, R, pts, rt), vs, name) :: L --> v :: L
  where
    type-check(pts, vs) --> true;
    ensure-access(name, clos, S) --> _;
    add-locals(locals) :: L1 --> _ :: L2;
    update-locals(params, vs) :: L2 --> _ :: L3;
    S, O |- handle-return(code, R) :: L3 --> v :: L4.
  
  closure-source(ClosV(_, _, _, _, _, _, _, Src, _, _, _)) --> Src.
  
signature
  arrows
    do-return(V) --> V
    handle-return(Code, Return-Marker) --> V
  
rules

  R Return-To(r-mark) |- do-return(v) :: EX Ok() --> ??? :: EX Rex(r-mark, v).
  
  handle-return(code, No-Return()) --> v
  where
    code --> v.
  
  handle-return(code, R@Return-To(r-mark)) :: EX Ok() --> v :: EX
  where
    R |- code :: EX Ok() --> vcode :: EX1;
    case EX1 of {
      Rex(r-mark', vret) =>
        case eqI(r-mark', r-mark) of {
          true =>
            vret => v;
            Ok() => EX
          otherwise =>
            vcode => v;
            EX1 => EX
        }
      otherwise =>
        EX1 => EX;
        vcode => v
    }.

rules

  disambiguate-closure(clos, x) --> disambiguate-closure(clos, DoneV(), x).

  // closure was defined in bottom and found in local
  disambiguate-closure(clos@ClosV(_, _, _, _, _, _, _, src, _, _, _), _, _) --> clos
  where
    src-is-base(src) --> true.

  // closure was only found in local
  disambiguate-closure(clos@ClosV(_, _, _, _, _, _, _, _, _, _, _), DoneV(), _) --> clos.
  
  // closure was only found in outer
  disambiguate-closure(DoneV(), clos@ClosV(_, _, _, _, _, _, _, _, _, _, _), _) --> clos.

  // closure found in inherited and in outer
  disambiguate-closure(ClosV(_, _, _, _, _, _, _, src, _, _, _), ClosV(_, _, _, _, _, _, _, _, _, _ ,_), x) --> DoneV()
  where
    src-is-base(src) --> false;
    halt-error("Method '" ++ x ++ "' is defined both as an inherited/used" ++
      "field and in an enclosing scope.", "") --> _.

  // closure not found
  disambiguate-closure(DoneV(), DoneV(), x) --> DoneV()
  where
    halt-error("No such method: ", x) --> _.


     
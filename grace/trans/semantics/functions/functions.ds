module trans/semantics/functions/functions

imports
  src-gen/ds-signatures/grace-sig
  trans/semantics/values
  trans/semantics/statements
  trans/semantics/booleans
  trans/semantics/controlflow
  trans/semantics/functions/calls
  trans/semantics/expressions
  trans/semantics/numbers
  trans/semantics/strings
  trans/semantics/visibility
  trans/semantics/objects/obj-constr
  
signature
  arrows
    method-closure(Declaration) --> V
    block-closure(Declaration) --> V
    copy-closure(V) --> V
    
    foo(V) --> V 
   
  native operators
    nativePrint: V -> V

rules

  MQCallOuter(e) --> RefV(outer(S))
  where
    e --> RefV(S).
    

  MCallL(ID(x), es) --> v
  where
    case x of {
      "print(_)" =>
        es => [e];
        nativePrint(e) => v
        
      "while(_)do(_)" =>
        es => [e1, e2];
        while-loop(e1, e2) --> v
      
      otherwise =>
        call-implicit(x, es) --> v
    }.

  EB E() |- MCallRecvL(e, ID(x), es) --> v
  where
    e --> recv;
    case recv of {
      BoolV(_) =>
        bool-call(recv, x, es) --> v
      NumV(_) =>
        num-call(recv, x, es) --> v
      StringV(_) =>
        str-call(recv, x, es) --> v
      otherwise =>
        call-qualified(recv, x, es) --> v
    }.

  BlockL(params, _, code) --> block-closure(MethodL(ID("lambda"), [], NoAnnotations(), params, [], no-type(), code)).

  Return(e) --> do-return(e).

rules /* closure construction */

  O |- method-closure(MethodL(_, _, annos, params, _, _, code)) :: L --> ClosV(O, params, locals, code, L, has-anno-public(annos), Return-To(fresh)) :: L
  where
    collect-locals(code, params) --> locals.
    // TODO reenable duplicate locals checking
//    error-check-locals(locals) --> _;

  S, O |- block-closure(MethodL(_, _, _, params, _, _, code)) :: L --> BlockV(S, ClosV(O, params, locals, code, L, true, No-Return())) :: L
  where
    collect-locals(code, params) --> locals.
//    error-check-locals(locals) --> _.

//  copy-closure(ClosV(S, O, params, locals, code, L, _, Src, No-Return())) --> ClosV(S, O, params, locals, code, L, false, Src', No-Return())
//  where
//    Src |- src-previous() --> Src'.
//  
//  copy-closure(ClosV(S, O, params, locals, code, L, _, Src, Return-To(_))) --> ClosV(S, O, params, locals, code, L, false, Src', Return-To(fresh))
//  where
//    Src |- src-previous() --> Src'.


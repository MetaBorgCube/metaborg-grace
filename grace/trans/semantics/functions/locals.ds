module trans/semantics/functions/locals

imports
  src-gen/ds-signatures/grace-sig
  trans/semantics/functions/calls

signature
  sort aliases
    Env = Map(String, Addr)
  
  components
    L : Env

  arrows
    collect-locals(Code, List(Identifier)) --> List(Identifier)
    declaration-name(Declaration) --> Identifier
    

rules
  
  collect-locals([], xs) --> xs.

  collect-locals([c | code], xs) --> collect-locals(code, xs)
  where
    c =!=> Declaration(_).
  
  collect-locals([Declaration(d) | code], xs) --> collect-locals(code, [x | xs])
  where
    declaration-name(d) --> x.

  declaration-name(VariableL(x, _, _, _)) --> x.
  
  declaration-name(ConstantL(x, _, _, _)) --> x.


/* ======== local variable error checking ========= */
signature
  arrows
    error-check-locals(List(Identifier)) --> U
  
    ensure-valid-local(String) --> U

rules

  error-check-locals([]) --> U().
  
  error-check-locals([ID(x) | ids]) :: L --> U() :: L
  where
    ensure-valid-local(x) --> _;
    error-check-locals(ids) :: L { x |--> 0, L} --> _.
  
  ensure-valid-local(x) --> U()
  where
    is-local(x) --> true;
    halt-error("Local '" ++ x ++ "' may not redefine local method.", "") --> _.
  
  S |- ensure-valid-local(x) --> U()
  where
    is-local(x) --> false;
    resolve(x, S) --> path;
    path-found(path) --> found;
    case found of {
      true =>
        path-local(path) --> local;
        case local of {
          true =>
            halt-error("Local '" ++ x ++ "' may not redefine method from self.") --> _
          false =>
            path-strictly-lexical(path) --> lexical;
            case lexical of {
              true =>
                halt-error("Local '" ++ x ++ "' may not shadow method from an enclosing scope.") --> _
              false =>
            }
        }
      false =>
    }.
  

/* ======== local environment operations ========== */
signature
  arrows
    add-local(Identifier) --> U
    add-locals(List(Identifier)) --> U
    
    update-local(Identifier, V) --> U
    update-locals(List(Identifier), List(V)) --> U
    
    is-local(String) --> Bool
    read-local(String) --> V
    snapshot-locals() --> Env
    
rules

  add-local(ID(x)) :: L --> U() :: L {x |--> addr, L}
  where
    v-allocate(UninitializedV()) --> addr.

  add-local(WildCard()) --> U().

  add-locals([]) --> U().

  add-locals([x | xs]) --> add-locals(xs)
  where
    add-local(x) --> _.

  update-locals([], []) --> U().
  
  update-locals([id | ids], [v | vs]) --> update-locals(ids, vs)
  where
    update-local(id, v) --> _.  
  
  update-local(ID(x), v) :: L --> U() :: L
  where
    v-update(L[x], v) --> _.
  
  update-local(WildCard(), _) --> U().




  is-local(x) :: L --> is-local :: L
  where
    ":=(_)" => bind_suffix;
    is-local
      as L[str-rm-suffix(x, bind_suffix)?] if str-ends-with(x, bind_suffix)
      or L[x?].

  read-local(x) :: L --> ensure-defined(v-read(L[x])) :: L.


  snapshot-locals() :: L --> L :: L.

/* ============ variable heap operations ======== */

signature
  sort aliases
    Addr = Int
    VHeap = Map(Addr, V)
  
  components
    VH : VHeap
  
  arrows
    v-allocate(V) :: H --> Addr :: H
    v-update(Addr, V) :: H --> Addr :: H
    v-read(Addr) :: H --> V :: H
    v-next() --> Addr
    
rules

  v-allocate(v) :: VH --> addr :: VH {addr |--> v, VH}
  where
    v-next() --> addr.

  v-read(addr) :: VH --> VH[addr] :: VH.

  v-update(addr, v) :: VH --> addr :: VH {addr |--> v, VH}.

  v-next() --> fresh.


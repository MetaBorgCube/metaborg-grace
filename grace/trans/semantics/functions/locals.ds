module trans/semantics/functions/locals

imports
  src-gen/ds-signatures/grace-sig
  trans/semantics/statements
  trans/semantics/functions/calls

signature
  sort aliases
    Env = Map(String, Addr)
  
  components
    L : Env

  arrows
    alloc-params(List(Identifier)) --> U
    alloc-locals(Code) --> U
    Statement -alloc-> U

rules
  
  alloc-params([]) --> U().
  
  alloc-params([id | params]) --> alloc-params(params)
  where
    add-local(id, UninitializedV()) --> _.
  
  alloc-locals([]) --> U().

  alloc-locals([s | xs]) --> alloc-locals(xs)
  where
    s -alloc-> _.

  Declaration(VariableL(id, _, _, _)) -alloc-> U()
  where
    add-local(id, UninitializedV()) --> _.

  Declaration(ConstantL(id, _, _, _)) -alloc-> U()
  where
    add-local(id, UninitializedV()) --> _.

  _ : Statement -alloc-> U().

/* ======== local environment operations ========== */
signature
  arrows
    add-local(Identifier, V) --> U
    add-locals(List(Identifier), List(V)) --> U
    
    update-local(Identifier, V) --> U
    update-locals(List(Identifier), List(V)) --> U
    
    is-local(String) --> Bool
    read-local(String) --> V
    snapshot-locals() --> Env
    
    ensure-valid-local(String) --> U
    
    
rules

  add-local(ID(x), v) :: L --> U() :: L {x |--> addr, L}
  where
    ensure-valid-local(x) --> _;
    v-allocate(v) --> addr.

  add-local(WildCard(), _) --> U().



  ensure-valid-local(x) --> U()
  where
    is-local(x) --> true;
    halt-error("Local '" ++ x ++ "' may not redefine local method.", "") --> _.
  
  ensure-valid-local(x) --> U()
  where
    is-local(x) --> false;
    lookup-local-method(current-self(), x) --> ClosV(_, _, _, _, _, _, _, _);
    halt-error("Local '" ++ x ++ "' may not redefine method from self.", "") --> _.
  
  ensure-valid-local(x) --> U()
  where
    is-local(x) --> false;
    lookup-outer-method(current-outer(), x) --> ClosV(_, _, _, _, _, _, _, _);
    halt-error("Local '" ++ x ++ "' may not shadow method from an enclosing scope.", "") --> _.
  
  ensure-valid-local(_) --> U().
  
  
  update-locals([], []) --> U().
  
  update-locals([id | ids], [v | vs]) --> update-locals(ids, vs)
  where
    update-local(id, v) --> _.  
  
  update-local(ID(x), v) :: L --> U() :: L
  where
    v-update(L[x], v) --> _.
  
  update-local(WildCard(), _) --> U().




  is-local(x) :: L --> is-local :: L
  where
    ":=(_)" => bind_suffix;
    str-ends-with(x, bind_suffix) --> is-assign;
    case is-assign of {
      true =>
        str-rm-suffix(x, bind_suffix) --> x';
        L[x'?] => is-local
      false =>
        L[x?] => is-local
    }.

  read-local(x) :: L --> v-read(L[x]) :: L.  

  add-locals([], []) --> U().

  add-locals([x | xs], [v | vs]) --> add-locals(xs, vs)
  where
    log("adding locals") --> _;
    add-local(x, v) --> _.

  snapshot-locals() :: L --> L :: L.

/* ============ variable heap operations ======== */

signature
  sort aliases
    Addr = Int
    VHeap = Map(Addr, V)
  
  components
    VH : VHeap
  
  arrows
    v-allocate(V) :: H --> Addr :: H
    v-update(Addr, V) :: H --> Addr :: H
    v-read(Addr) :: H --> V :: H
    v-next() --> Addr
    
rules

  v-allocate(v) :: VH --> addr :: VH {addr |--> v, VH}
  where
    v-next() --> addr.

  v-read(addr) :: VH --> VH[addr] :: VH.

  v-update(addr, v) :: VH --> addr :: VH {addr |--> v, VH}.

  v-next() --> fresh.
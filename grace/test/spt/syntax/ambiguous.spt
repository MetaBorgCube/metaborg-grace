module syntax-ambiguous

language grace

start symbol Program

// tests that once were ambiguous but no are fixed, put here to prevent regressions.

test prefix operator with number [[
method a(v) {
  var b; 
  b := 3;
  +4;
};
]] 0 warnings 0 errors

test operator and method call with receiver [[
5 + a . b;
]] 0 warnings 0 errors

test operator and method call with receiver no spaces [[
5 + a.b;
]] 0 warnings 0 errors

test return with method with dot [[
  return a.b;
]] 0 warnings 0 errors

test print string plus number [[
print("m.map = " + m.map);
]] 0 warnings 0 errors

test assignmentmethod [[
var a := object {
  method field:=(val) {
    print("assigned " ++ val ++ " to field");
  };
};
a.field := 13;
]] 0 warnings 0 errors

test hard assignment [[
self.val := self.val + 1;
]] 0 warnings 0 errors
test double outer addition [[outer.outer.a + 1;]] 0 warnings 0 errors
test double outer assignment [[f := outer.outer;]] 0 warnings 0 errors
test double self assignment [[f := self.self;]] 0 warnings 0 errors
test assignment double outer field [[f := outer.outer.a + 1;]] 0 warnings 0 errors

test assignment double self field [[f := self.self.a + 1;]] 0 warnings 0 errors

test assignment self outer field [[f := self.outer.a + 1;]] 0 warnings 0 errors

test assignment double outer [[f := outer.outer + 1;]] 0 warnings 0 errors

test assignment double self [[f := self.self + 1;]] 0 warnings 0 errors

test var assign with escape string [[var x := "test\"quotes\"hello\"\"world";]] 0 warnings 0 errors

test specifc scientific number [[4945E-1;]] 0 warnings 0 errors

test operator and outer [[a + a.outer;]] 0 warnings 0 errors

test type expression combination [[def a: type { } & type { } + type { } = false;]] 0 warnings 0 errors


module grace

imports

  general
  keywordRejections
  grace-lowered

context-free start-symbols

  Program
  Exp

context-free syntax

  Program.Program               = <<{Statement "\n"}*> <EOF>>

context-free syntax

  Statement.Dialect             = <dialect <STRING>>
  Statement.Import              = <import <STRING> as <Identifier>>
//  Statement.Assignment          = <<Assignment>;>
  Statement.Declaration         = <<Declaration>;>
  Statement.Expression          = <<Exp>;>

context-free syntax

//  Assignment.Assignment         = <<ID> := <Exp>>
  VarInit.VarInit               = < := <Exp>>
  VarInit.NoVarInit             = <>
  Declaration.Constant          = <def <Identifier><Annotations> = <Exp>>
  Declaration.Variable          = <var <Identifier><Annotations><VarInit>>
  Declaration.MethodDecl        = <method <MethodNames><Annotations> <MethodBody>>
  Declaration.ClassDecl         = <
                                   class <ClassName>{
                                       <Inherit><Use*><{Statement "\n"}*>
                                   }
                                  >
  Declaration.TraitDecl         = <trait <MethodNames> <MethodBody>>
  Use.Use                       = <
                                       use <Exp> <Modifier*>;

                                  >
  ClassName.FullStop            = <<ID>.<MethodNames>>
  ClassName.MethodName          = <<MethodNames>>
                                  
  MethodNames.Single            = <<MethodNameNoParam>>
  MethodNames.Multiple          = <<MethodName+>>
                                  
  MethodNameNoParam.MethodID    = <<Identifier>>
  MethodNameNoParam.MethodOp    = <<OperatorCF>>
  MethodNameNoParam.PrefixOp    = <<PrefixOperator>>
  
  MethodName.MethodID           = <<Identifier> <Params>>
  MethodName.MethodOp           = <<OperatorCF> <Params>>
  MethodName.PrefixOp           = <<PrefixOperator> <Params>>
  
//  Prefix.Prefix                 = "prefix"
//  Prefix.NoPrefix               = <>
  
  Identifier.ID                 = <<ID>>
  Identifier.WildCard           = "_"
  
  Annotations.Annotations       = < is <{Annotation ", "}+>>
  Annotations.NoAnnotations     = <>
  
  Annotation.Public             = "public"
  Annotation.Readable           = "readable"
  Annotation.Writeable          = "writable"
  Annotation.Confidential       = "confidential"
  Annotation.Manifest           = "manifest"
  Annotation.Overrides          = "override"
  
  Params.Params                 = <(<{Param ", "}+>)>
  Param.Param                   = <<Identifier>>

  MethodBody.MethodBody         = <
                                   {
                                       <{Statement "\n"}*>
                                   }
                                  >
   
context-free syntax
  
  Exp.ObjectDecl                = <
                                   object {
                                       <Inherit><Use*><{Statement "\n"}*>
                                   }
                                  >
  
  Exp.Number                    = <<NUM>>
  Exp.String                    = <<STRING>>
  Exp.Boolean                   = <<Boolean>>
  Exp.Self                      = "self"
  
  Exp                           = <(<Exp>)>                    {bracket}
  Exp.MCallOpEx                 = <<Exp> <OperatorCF> <Exp>>   {left, prefer}
  Exp.MCallOpExAssign           = <<Exp> := <Exp>>             {left, prefer}
  Exp.MCallWDot                 = <<Exp>.<Part+>>              {left}
  Exp.MCallImpl                 = <<Part+>>                    {left}
//  Exp.MCallPrefixOp             = <<OperatorCF> <CallArgs>>    {left}
  Exp.MCallPrefixOpExp          = <<OperatorCF> <Exp>>         {left, prefer}
  
  Exp.LineupExp                 = <<Lineup>>
  Exp.Ellipsis                  = "..."
  Exp.BlockExp                  = <<Block>>
  
  Exp.Return                    = <return <Exp>>               {right}
  
  Exp.MatchCase                 = <
                                   match (<Exp>)
                                       <{Case "\n"}+>
                                  > {prefer} // over methodcall
  Case.Case                     = [case { [CaseExp] [Arrow] [{Statement "\n"}*] }]
  Case.CaseParen                = [case ({ [CaseExp] [Arrow] [{Statement "\n"}*] })]
  CaseExp.CaseExp               = <<CaseLiteral>>
  CaseExp.CaseExpMulti          = <<CaseLiteral> <BoolOp> <CaseLiteral>>
  CaseExp.ExpParens             = <(<Exp>)>
  CaseExp.Identifier            = <<Identifier>>
  CaseExp.ExpTyped              = <<Identifier> : <CaseType>>
  BoolOp.Or                     = "|"
  BoolOp.And                    = "&"
  CaseType.Type                 = <<Identifier>>
  CaseLiteral.Number            = <<NUM>>
  CaseLiteral.String            = <<STRING>>
  CaseLiteral.Boolean           = <<Boolean>>
  
  Arrow.Ascii                   = "->"
  Arrow.Unicode                 = "â†’"
  
  
context-free syntax
  
  Part.Part                     = <<Identifier><CallArgs>>
  
  CallArgs.ArgsParen            = < (<{Exp ", "}+>)>           {left}
  CallArgs.NoArgs               = <>

  CallArgs.ArgBlock             = < <Block>>
  CallArgs.ArgNumber            = < <NUM>>
  CallArgs.ArgString            = < <STRING>>
  CallArgs.ArgLineup            = < <Lineup>>
  CallArgs.ArgBoolean           = < <Boolean>>
    
  OperatorCF.OperatorCF         = <<Operator>>
  
  Inherit.Inherit               = <
                                   inherit <Exp> <Modifier*>;
                  
                                  >
  Inherit.NoInherit             = <>
                                  
  Modifier.Alias                = <<Alias>>
  Modifier.Exclude              = <<Exclude>>
  Alias.Alias                   = < alias <MethodNames> = <MethodNames>>
  Exclude.Exclude               = < exclude <MethodNames>>
  
  Boolean.True                  = "true"
  Boolean.False                 = "false"
  Lineup.Lineup                 = <[ <{Exp ", "}*> ]>
  Block.Block                   = <{ <{Statement "\n"}*> }>
  Block.BlockWParams            = <{ <BlockParams> <{Statement "\n"}*> }>    {prefer}
  BlockParams.BlockParams       = [[{Param ", "}*] ->]
  
context-free priorities

  Exp.MCallWDot > Exp.Return
  ,
  Exp.MCallWDot > Exp.MCallOpEx > Exp.MCallOpExAssign
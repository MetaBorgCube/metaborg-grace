module grace

imports

  general
  keywordRejections
  grace-lowered

context-free start-symbols
  
  Program
  Exp

context-free syntax

  Program.Program               = <<{Statement "\n"}*> <EOF>>

context-free syntax

  Statement.Dialect             = <dialect <STRING>>
  Statement.Import              = <import <STRING> as <ID>>
  Statement.Assignment          = <<Assignment>;>
  Statement.Declaration 	    = <<Declaration>;> {avoid}
  Statement.Expression          = <<Exp>;>

context-free syntax

  Assignment.Assignment         = <<ID> := <Exp>>
  VarInit.VarInit               = < := <Exp>>
  VarInit.NoVarInit             = <>
  Declaration.Constant          = <def <ID><Annotations> = <Exp>> 
  Declaration.Variable          = <var <ID><Annotations><VarInit>> 
  Declaration.MethodDecl        = <method <Prefix><MethodName+><Annotations> <MethodBody>>
  Declaration.ClassDecl         = <
                                    class <MethodName+>{
                                      <Inherit><Use*><{Statement "\n"}*>
                                    }
                                  >
  Declaration.TraitDecl         = <trait <MethodName+> <MethodBody>>
  Use.Use                       = <
									use <Exp><Alias><Exclude>;

								  >
  
  MethodName.MethodID           = <<Identifier> <Params>>
  MethodName.MethodOp           = <<OperatorCF> <Params>>
  
  Prefix.Prefix                 = "prefix "
  Prefix.NoPrefix               = <>
  
  Identifier.ID                 = <<ID>>
  
  Annotations.Annotations       = < is <{Annotation ", "}+>>
  Annotations.NoAnnotations     = <>
  
  Annotation.Public             = "public"
  Annotation.Readable           = "readable"
  Annotation.Writeable          = "writable"
  Annotation.Confidential       = "confidential"
  Annotation.Manifest           = "manifest"
  Annotation.Overrides          = "overrides"
  
  Params.Params                 = <(<{Param ", "}*>)>
  Params.NoParams               = <>
  Param.Param                   = <<ID>>

  MethodBody.MethodBody         = <
									{
									  <{Statement "\n"}*>
									}
								  >
  
context-free syntax
  
  Exp.ObjectDecl                = <
									object {
									  <Inherit><Use*><{Statement "\n"}*>
									}
								  >
  
  Exp.Number                    = <<NUM>>
  Exp.String                    = <<STRING>>
  Exp.Boolean                   = <<Boolean>>
  Exp.Self                      = "self"
  Exp.Outer                     = "outer"
  Exp.PlaceHolder               = "_"
  
  Exp                           = <(<Exp>)>										{bracket}

  Exp.MCallOpEx                 = <<Exp> <OperatorCF> <Exp>>					{left}
  Exp.MCallWDot                 = <<Exp>.<Part+>>								{left}
  Exp.MCallImpl                 = <<Part+>>										{left}
  Exp.MCallPrefixOp             = <<OperatorCF> <CallArgs>>						{left}
  Exp.MCallPrefixOpExp          = <<OperatorCF> <Exp>>							{left}
  
  Exp.LineupExp                 = <<Lineup>>
  Exp.Ellipsis                  = "..."
  Exp.BlockExp                  = <<Block>>
  
  Exp.Return                    = <return <Exp>>

context-free syntax
  
  Part.Part                     = <<Identifier><CallArgs>>
  
  CallArgs.ArgsParen            = < (<{Exp ", "}+>)> {left}
  CallArgs.NoArgs               = <>

  CallArgs.ArgBlock             = < <Block>>
  CallArgs.ArgNumber            = < <NUM>>
  CallArgs.ArgString            = < <STRING>>
  CallArgs.ArgLineup            = < <Lineup>>
  CallArgs.ArgBoolean           = < <Boolean>>
    
  OperatorCF.OperatorCF         = <<Operator>>
  
  Inherit.Inherit               = <
                                    inherit <Exp><Alias><Exclude>;
									
  								  >
  Inherit.NoInherit             = <>
  Alias.Alias                   = < alias <ID> = <ID>>
  Alias.NoAlias                 = <>
  Exclude.Exclude               = < exclude <{ID ", "}*>>
  Exclude.NoExclude             = <>
  
  Boolean.True                  = "true"
  Boolean.False                 = "false"
  Lineup.Lineup                 = <[ <{Exp ", "}*> ]>
  Block.Block                   = <{ <{Statement "\n"}*> }>
  Block.BlockWParams            = <{ <BlockParams> <{Statement "\n"}*> }>    {prefer}
  BlockParams.BlockParams       = [[{Param ", "}*] ->]

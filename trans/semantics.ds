module trans/semantics

imports
  src-gen/ds-signatures/Grace-sig
  
  trans/values
  trans/store
  trans/environment

signature
  
  constructors
    Object: O * O * Env -> O // the enclosing object, inherited object, and its bound names
    Trait: Env -> O // basically just a list of mappings of function names to memory locations
    Method: List(String) * Env * List(CodeSequence) -> O // env of declaration and code
    NoObject: O
    Wrapped: V -> CodeSequence
    WrappedO: O -> V
    WrappedArgs: CallArgs -> V
    
    saveConstMethod: Env * String * V --> Env
    getParamNames: Params --> List(String)
    saveConstants: Env * List(String) * List(V) --> Env
    evalArgs: CallArgs --> List(V)
    
  arrows
    Exp --> V
    Boolean --> V
    CodeSequence --> V
    Declaration --> V
    Assignment --> V
    CallArgs --> V
    List(CodeSequence) --> V
    
//    List(V) --> V
    
    Params --> List(String)
//    CallArgs --> List(V)
    
    Program -init-> V
    
    Exp -o-> O
    Declaration -o-> O
    
    
  native operators
    nativeIBinOp: String * Int * Int -> Int
    nativeIfThenElse: Bool * V * V -> V
    nativePrint: V -> V
    
rules

  Program(cs, _) -init-> cs'
    where
      O NoObject() |- cs :: Env {}, Heap {}, OHeap {} --> cs' :: Env _, Heap _, OHeap _.
  
//  Env eEnc |- ObjectDecl(Inherit(inhExp,_,_), [Use(useExp,_,_)], cs) :: E -o-> Object(eEnc, e', cs)
//    where
//      // 1. create empty object
//      // 2. bind self (env + {})
//      // 3. evalute inherit (recurse) and merge into
//      // 4. evaluate traits and merge into (override inherit)
//      // 5. evaluate local method definitions and merge (override inherit and traits)
//      // 6. evaluate fields and statements. (deferred)
//      Object(eEnc,  E, cs) => self; // create blank object 1
//      
//      E |- bindName("self", allocateO(self)) --> eSelf; // 2
//      
//      inhExp :: Env eSelf -o-> Object(eInh, eInhEnc, csInh); // 3
//      
//      Env eInhEnc |- csInh :: Env eInh --> _ :: Env EAfterInh; //
//      
//      useExp :: Env eInh --> Trait(eTrait); // 4
//      
//      {eTrait, EAfterInh} => e'.
//  
  
//  Object(oEnc, oInh, env) --> v
//    where
//      print(StringV("evalutating object after defer")) => _;
//      Env eEnc |- cs :: Env e --> v.
      
  O encO |- ObjectDecl(NoInherit(), [], cs)  :: E, H, OH -->
                WrappedO(Object(Object(encO, NoObject(), E), NoObject(), E')) :: E', H', OH'
    where
      print(StringV("directly evaluating object")) => _;
      print(getOHeap(OH)) => _;
      O Object(encO, NoObject(), E) |- cs :: E, H, OH  --> _ :: E', H', OH';
      print(StringV("done directly evaluating object")) => _;
      print(getOHeap(OH')) => _;
      print(StringV("==========")) => _.

  Expression(e) --> e.
  Declaration(e) --> e.
  Wrapped(v) --> v.
  Assignment(e) --> e.
  
  cs : List(CodeSequence) :: E --> v :: Env eFinal
  where
    case cs of {
        [] =>
            Done() => v;
            E => eFinal
        [code|[]] =>
            code :: E --> v :: Env eFinal
        [code | cs'] =>
            code :: E --> _ :: Env e';
            cs' :: Env e' --> v :: Env eFinal
    }.
  
  Number(s) --> NumV(parseNumber(s)).
  ArgNumber(s) --> NumV(parseNumber(s)).
  ArgBoolean(s) --> s.
  ArgString(s) --> StringV(s).
  String(s) --> StringV(s).
  True() --> BoolV(true).
  False() --> BoolV(false).
  Boolean(s) --> s.

  saveConstants(startEnv, names, values) --> eFinal
    where
      case names of {
        [] =>
          {} => eFinal
        [n | []] =>
          values => [ v | [] ];
          saveConstMethod(startEnv, n, v) --> eFinal;
        [n | ns] =>
          values => [v|vs];
          saveConstMethod(startEnv, n, v) --> e;
          saveConstants(startEnv, ns, vs) --> em;
          {em, e} => eFinal
      }.
  
  saveConstMethod(startEnv, name, v) --> e'
    where 
      print(StringV("saving const method")) => _;
      fresh => i;
      writeO(i, Method([], startEnv, [Wrapped(v)])) --> _;
      bindName(name, i) --> e';
      print(StringV("==end saving const method==")) => _.

  evalArgs(ArgsParen(actualArgs)) --> agvs: List(V)
    where
      print(StringV("evalArgs (ArgsParen)")) => _;
      case actualArgs of {
        [] =>
          [] => agvs
        [ arg | [] ] =>
          arg --> pv1;
          [pv1] => agvs
        [ arg | args ] => 
          arg --> pv1;
          evalArgs(ArgsParen(args)) --> pvs;
          [pv1 | pvs ] => agvs
      }.

  evalArgs(NoArgs()) --> [] where print(StringV("evalArgs (NoArgs)")) => _.
  evalArgs(v) --> [v] where print(StringV("evalArgs (direct)")) => _.

  MCallImpl([Part(ID(name),NoArgType(),NoArgs())]) :: E, H, OH --> v :: E, H, OH
    where
      readO(readName(name)) --> Method([], e, cs);
      cs :: Env {E, e} --> v. // add local env constants (dynamic scoping)

  MCallImpl([Part(ID(name),NoArgType(),arguments)]) :: E, H, OH --> v :: E, H, OH
    where
      name == "base_print";
      print(StringV("executing base_print (StringV)")) => _;
      print(StringV("evaluating arguments")) => _;
      print(WrappedArgs(arguments)) => _;
      evalArgs(arguments) --> [a] : List(V);
      print(StringV("calling base_print method")) => _;
      nativePrint(a) => _;
      Done() => v.

  MCallImpl([Part(ID(name),NoArgType(),arguments)]) :: E, H, OH --> v :: E, H, OH
    where
      name == "base_add";
      print(StringV("evaluating arguments")) => _;
//      print(arguments) => _;
      evalArgs(arguments) --> [NumV(i1), NumV(i2)];
      print(StringV("calling base_add method")) => _;
      NumV(nativeIBinOp("+", i1, i2)) => v;
      print(v) => _.
        
  MCallImpl([Part(ID(name),NoArgType(),arguments)]) :: E, H, OH --> v :: E, H, OH
    where
      name == "base_ifThenElse";
      print(StringV("evaluating arguments")) => _;
//      print(arguments) => _;
      evalArgs(arguments) --> [BoolV(b), e1, e2];
      print(StringV("calling base_add method")) => _;
      nativeIfThenElse(b, e1, e2) => v;
      print(v) => _.

  MCallImpl([Part(ID(name),NoArgType(),arguments)]) :: E, H, OH --> v :: E, H, OH
    where
      name != "base_add";
      name != "base_ifThenElse";
      name != "base_print";
      print(StringV("calling real method")) => _;
      readName(name) :: E --> i;
      print(StringV("read name")) => _;
      evalArgs(arguments) --> actualArgsVs;
      print(StringV("evaluated args")) => _;
      print(getOHeap(OH)) => _;
      readO(i) :: OH --> Method(names, e, cs);
      print(StringV("read method")) => _;
      print(getOHeap(OH)) => _;
      saveConstants(e, names, actualArgsVs) --> e' :: OH';
      print(StringV("saved constants")) => _;
      print(getOHeap(OH')) => _;
      {E, e} => e''; // add local env constants (dynamic scoping)
      {e', e''} => e'''; // add constants
      cs :: Env e''', H, OH' --> v; // add the parameter constant method to the env
      print(StringV("evalutated code")) => _;
      print(v) => _.

  MCallCanonical(NoPrefix(),receiver,ID(name),NoArgType(),NoArgs()) :: OH --> v :: OH
    where
      print(StringV("method call with receiver")) => _;
      
      receiver --> WrappedO(Object(_, _, receiverEnv)); // MCallImpl([Part(ID("a"),NoArgType(),NoArgs())])
      
      print(Binding(receiverEnv)) => _;
      print(getOHeap(OH)) => _;
      
      readName(name) :: Env receiverEnv --> i; // read address from receiver environment
      
      readO(i) :: OH --> Method(names, e, cs); // read method from heap
      
      cs :: Env {e, receiverEnv}, OH --> v; // merge env from method with object env and execute
      
      print(v) => _;
      
      print(NumV(i)) => _;
      
      Done() => v;
      
      print(StringV("==end method call with receiver==")) => _. 

  MCallOp(NumV(i1),OperatorCF(s),NoArgType(),NumV(i2)) --> NumV(nativeIBinOp(s, i1, i2)).

  getParamNames(pList) --> paramNames
    where
      print(StringV("getting param names")) => _;
      case pList of {
        Params([]) =>
          [] => paramNames
        Params([Param(name, _) | [] ]) =>
          [name] => paramNames
        Params([Param(name, _) | otherNames ]) =>
          getParamNames(Params(otherNames)) --> names;
          [ name | names ] => paramNames
      }.
      
  getParamNames(NoParams()) --> []
    where
      print(StringV("getting param names for NoParams()")) => _.

  MethodDecl(NoPrefix(),
    [MethodID(ID(name),NoArgType(),NoAnnotations(),
      ps // [Param(paramName,NoTypeAnn())]
    )], NoMethodType(), MethodBody( cs ), NoWhere() ) :: E, OH --> Done() :: Env e'
    where
      print(StringV("Declaring method")) => _;
      print(getOHeap(OH)) => _;
      getParamNames(ps) --> pNames;
      fresh => i;
      {name |--> i, E} => eNew; // add itself to its own evironment
      print(StringV("writing")) => _;
      writeO(i, Method(pNames, eNew, cs))--> _; 
      print(StringV("method written")) => _;
      bindName(name, i) --> e'; // saves and returns done 
      
      print(Binding(E)) => _;
      print(Binding(eNew)) => _;
      print(Binding(e')) => _;
      print(StringV("==========")) => _. 
  
  // for now constants will just be a method returning the evaluated value
  Constant(name, _, _, e1) :: E --> Done() :: E''
    where
      print(StringV("Binding constant")) => _;
      
      e1 --> v1;
      saveConstMethod(E, name, v1) --> E'';
      
      print(StringV("==========")) => _.

  O Object(_, _, eEnc) |- MCallWDot(Outer(),[Part(ID(name),NoArgType(),NoArgs())]) --> v
    where
      print(StringV("reading from outer")) => _;
      print(Binding(eEnc)) => _;
      eEnc[name] => i;
      print(NumV(i)) => _;
      read(i) => v;
      Done() => v. 
   
//  TraitDecl(
//    [MethodID(ID(mName), NoArgType(), NoAnnotations(), NoParams())],
//    MethodBody(cs)
//  ) -o-> Trait(e')
//    where
//      cs --> sm@Method(_, _, _);
//      bindName(mName, allocate(sm)) => e';
//      Trait(e') => t.
